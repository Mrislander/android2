package com.elitise.appv2;

import android.graphics.Paint;
import android.graphics.PointF;
import android.graphics.RectF;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.graphics.Typeface;



/**
 * Created by ShannonGreen on 1/17/17.
 * Copyright Â© 2017 InduraPower. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author ShannonGreen
 */
public class Logo_paths {
    // Resizing Behavior

    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }

    // Canvas Drawings

    // Tab

    public static void drawCanvas1(Canvas canvas, String version) {
        Logo_paths.drawCanvas1(canvas, new RectF(0f, 0f, 782f, 65f), ResizingBehavior.AspectFit, version);
    }

    public static void drawCanvas1(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, String version) {
        // General Declarations
        Paint paint;

        // Local Colors
        int color = Color.argb(255, 255, 102, 51);
        int color3 = Color.argb(255, 109, 110, 112);

        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = Logo_paths.resizingBehaviorApply(resizing, new RectF(0f, 0f, 782f, 65f), targetFrame);
        canvas.translate(new PointF(resizedFrame.left, resizedFrame.top).x, new PointF(resizedFrame.left, resizedFrame.top).y);
        canvas.scale(resizedFrame.width() / 782f, resizedFrame.height() / 65f);

        // InduraPower Logo-Tagline-FINAL-2 [Converted].svg Group
        {
            // Bezier 2
            RectF bezier2Rect = new RectF(40.1f, 6.8f, 48.78f, 57.55f);
            Path bezier2Path = new Path();
            bezier2Path.moveTo(41f, 6.8f);
            bezier2Path.cubicTo(42.5f, 7f, 45.7f, 6.6f, 47.3f, 7.3f);
            bezier2Path.cubicTo(49.3f, 11.1f, 48.7f, 16.3f, 48.7f, 22f);
            bezier2Path.cubicTo(48.7f, 29.3f, 48.7f, 36.6f, 48.7f, 43.9f);
            bezier2Path.cubicTo(48.7f, 47.8f, 49f, 52.6f, 48.2f, 55.8f);
            bezier2Path.cubicTo(47.6f, 56.2f, 47.4f, 56.7f, 46.6f, 57f);
            bezier2Path.cubicTo(45f, 58.1f, 40.7f, 57.4f, 40.1f, 56.1f);
            bezier2Path.cubicTo(40.1f, 40.1f, 40.1f, 24.2f, 40.1f, 8.2f);
            bezier2Path.cubicTo(40.5f, 7.6f, 40.7f, 7.2f, 41f, 6.8f);
            bezier2Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            bezier2Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color3);
            canvas.drawPath(bezier2Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color3);
            canvas.drawPath(bezier2Path, paint);
            canvas.restore();

            // Bezier 6
            RectF bezier6Rect = new RectF(454f, 15.32f, 539.51f, 59.71f);
            Path bezier6Path = new Path();
            bezier6Path.moveTo(495.9f, 33.5f);
            bezier6Path.cubicTo(495.6f, 35.9f, 494.7f, 36f, 493.8f, 37.7f);
            bezier6Path.cubicTo(491.6f, 42.2f, 489.1f, 46.4f, 487.1f, 50.7f);
            bezier6Path.cubicTo(485.8f, 53.3f, 485f, 56.9f, 482.7f, 58.4f);
            bezier6Path.cubicTo(480.9f, 59.6f, 476.6f, 60.1f, 474.1f, 59.1f);
            bezier6Path.cubicTo(470.7f, 57.7f, 469.2f, 52.6f, 467.8f, 49.1f);
            bezier6Path.cubicTo(465.1f, 42.2f, 460.9f, 35.7f, 458f, 28.6f);
            bezier6Path.cubicTo(456.8f, 25.7f, 454.2f, 23.2f, 454f, 19.3f);
            bezier6Path.cubicTo(454.8f, 18.3f, 455.2f, 17f, 456.3f, 16.3f);
            bezier6Path.cubicTo(458.6f, 14.9f, 463.2f, 15.1f, 465.1f, 16.5f);
            bezier6Path.cubicTo(467f, 17.8f, 467.4f, 20.6f, 468.4f, 23f);
            bezier6Path.cubicTo(469.9f, 26.9f, 472.3f, 31.3f, 474.2f, 35.1f);
            bezier6Path.cubicTo(475.3f, 37.3f, 475.6f, 42.2f, 478.6f, 42.3f);
            bezier6Path.cubicTo(481.5f, 35.8f, 485f, 29.2f, 488.6f, 23.2f);
            bezier6Path.cubicTo(489.9f, 21f, 490.3f, 18.2f, 492.3f, 16.7f);
            bezier6Path.cubicTo(494.2f, 15.3f, 498.3f, 14.7f, 500.7f, 16.2f);
            bezier6Path.cubicTo(502.2f, 17.2f, 502.6f, 19.1f, 503.5f, 20.9f);
            bezier6Path.cubicTo(505.9f, 25.6f, 509f, 30.5f, 511.2f, 35.3f);
            bezier6Path.cubicTo(512.1f, 37.3f, 513.4f, 42.4f, 515.9f, 42.5f);
            bezier6Path.cubicTo(516.4f, 40f, 517.9f, 37.8f, 518.9f, 35.8f);
            bezier6Path.cubicTo(519.9f, 33.9f, 520f, 32.2f, 521f, 30.2f);
            bezier6Path.cubicTo(522.1f, 28f, 523.7f, 25.3f, 524.7f, 23f);
            bezier6Path.cubicTo(525.7f, 20.7f, 526.3f, 17.2f, 528.7f, 16.3f);
            bezier6Path.cubicTo(531.9f, 14f, 540.6f, 16.2f, 539.4f, 20.7f);
            bezier6Path.cubicTo(538.6f, 23.9f, 535.8f, 27f, 534.5f, 30f);
            bezier6Path.cubicTo(531.7f, 36.8f, 528.3f, 43.2f, 525f, 49.5f);
            bezier6Path.cubicTo(522.8f, 53.7f, 522.2f, 58.2f, 517.1f, 59.5f);
            bezier6Path.cubicTo(514.9f, 60.1f, 512.1f, 59.3f, 510.8f, 58.6f);
            bezier6Path.cubicTo(508.6f, 57.4f, 507.7f, 54.5f, 506.6f, 52.1f);
            bezier6Path.cubicTo(505.5f, 49.7f, 503.5f, 47.3f, 502.4f, 45.1f);
            bezier6Path.cubicTo(501.8f, 43.9f, 502.2f, 43.3f, 501.7f, 42.1f);
            bezier6Path.cubicTo(501.4f, 41.2f, 500.3f, 39.9f, 499.8f, 39.1f);
            bezier6Path.cubicTo(498.8f, 37.2f, 498.7f, 33.7f, 495.9f, 33.5f);
            bezier6Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            bezier6Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(bezier6Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color);
            canvas.drawPath(bezier6Path, paint);
            canvas.restore();

            // Bezier 7
            RectF bezier7Rect = new RectF(602.13f, 15.4f, 632.33f, 59.72f);
            Path bezier7Path = new Path();
            bezier7Path.moveTo(619.9f, 15.4f);
            bezier7Path.cubicTo(624.9f, 15.8f, 632.1f, 14.1f, 632f, 19.8f);
            bezier7Path.cubicTo(632.7f, 21f, 632.1f, 23.4f, 632f, 24.9f);
            bezier7Path.cubicTo(631.2f, 25.5f, 630.4f, 26.1f, 629.7f, 26.8f);
            bezier7Path.cubicTo(625.9f, 28f, 617.4f, 25.5f, 616f, 28.7f);
            bezier7Path.cubicTo(615f, 30.2f, 615.5f, 34.5f, 615.5f, 36.8f);
            bezier7Path.cubicTo(615.5f, 43.5f, 616f, 51.7f, 614.8f, 57.3f);
            bezier7Path.cubicTo(612.6f, 58.9f, 608.1f, 61f, 604.6f, 58.7f);
            bezier7Path.cubicTo(603.9f, 57.8f, 603.2f, 56.8f, 602.5f, 55.9f);
            bezier7Path.cubicTo(602.5f, 44.2f, 600.3f, 25.4f, 606.7f, 20.1f);
            bezier7Path.cubicTo(608.7f, 18.5f, 611.9f, 17.2f, 614.6f, 16.4f);
            bezier7Path.cubicTo(616.4f, 15.7f, 618.6f, 16.4f, 619.9f, 15.4f);
            bezier7Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            bezier7Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(bezier7Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color);
            canvas.drawPath(bezier7Path, paint);
            canvas.restore();

            // Bezier 9
            RectF bezier9Rect = new RectF(177.5f, 17.69f, 233.45f, 57.27f);
            Path bezier9Path = new Path();
            bezier9Path.moveTo(189.6f, 56.3f);
            bezier9Path.cubicTo(183.8f, 56.3f, 178.8f, 51.6f, 177.5f, 47f);
            bezier9Path.cubicTo(177.5f, 38f, 177.5f, 29f, 177.5f, 20f);
            bezier9Path.cubicTo(179.4f, 18.4f, 179.8f, 17.6f, 183.8f, 17.7f);
            bezier9Path.cubicTo(184.3f, 18.3f, 184.9f, 18.4f, 185.4f, 18.9f);
            bezier9Path.cubicTo(187.2f, 21.6f, 186.1f, 35.1f, 186.1f, 40.3f);
            bezier9Path.cubicTo(186.1f, 42.2f, 185.6f, 45.7f, 186.3f, 47f);
            bezier9Path.cubicTo(187.6f, 50.4f, 190.8f, 48.7f, 194f, 50f);
            bezier9Path.cubicTo(195.5f, 50.6f, 198.3f, 50.5f, 200.5f, 50.5f);
            bezier9Path.cubicTo(205.6f, 50.5f, 213.4f, 51.5f, 217.2f, 49.8f);
            bezier9Path.cubicTo(218.8f, 49.6f, 220.3f, 49.5f, 221.9f, 49.3f);
            bezier9Path.cubicTo(223.1f, 48.5f, 224f, 47.3f, 224.9f, 46.3f);
            bezier9Path.cubicTo(224.9f, 40.4f, 224.9f, 34.5f, 224.9f, 28.6f);
            bezier9Path.cubicTo(224.9f, 25.5f, 224.6f, 21.8f, 225.1f, 19.1f);
            bezier9Path.cubicTo(226.7f, 18.1f, 227.8f, 17.7f, 230.7f, 17.7f);
            bezier9Path.cubicTo(231f, 17.9f, 231f, 17.6f, 231.4f, 17.9f);
            bezier9Path.cubicTo(233.9f, 20.3f, 233.3f, 26f, 233.3f, 30.9f);
            bezier9Path.cubicTo(233.3f, 40.8f, 234.8f, 49.4f, 228.4f, 53.2f);
            bezier9Path.cubicTo(227.2f, 53.9f, 226.8f, 54.9f, 224.9f, 55.1f);
            bezier9Path.cubicTo(224.9f, 55.7f, 225.2f, 55.3f, 224.7f, 55.8f);
            bezier9Path.cubicTo(216.8f, 58.3f, 198f, 56.8f, 189.6f, 57f);
            bezier9Path.cubicTo(189.6f, 56.8f, 189.6f, 56.5f, 189.6f, 56.3f);
            bezier9Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            bezier9Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color3);
            canvas.drawPath(bezier9Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color3);
            canvas.drawPath(bezier9Path, paint);
            canvas.restore();

            // Bezier 10
            RectF bezier10Rect = new RectF(55.28f, 17.69f, 109.9f, 57.49f);
            Path bezier10Path = new Path();
            bezier10Path.moveTo(71.2f, 17.9f);
            bezier10Path.cubicTo(84.9f, 17.8f, 102.2f, 16.1f, 107.7f, 24.2f);
            bezier10Path.cubicTo(110.2f, 27.8f, 109.6f, 34.7f, 109.6f, 40.7f);
            bezier10Path.cubicTo(109.6f, 43.5f, 110.4f, 52.6f, 109.4f, 54.4f);
            bezier10Path.cubicTo(109f, 55.6f, 108.1f, 56.7f, 106.8f, 57f);
            bezier10Path.cubicTo(104.7f, 58.4f, 101.7f, 56.5f, 101.2f, 55.1f);
            bezier10Path.cubicTo(100.5f, 53.8f, 101f, 50.6f, 101f, 48.8f);
            bezier10Path.cubicTo(101f, 43.3f, 102.2f, 28.8f, 99.4f, 26.5f);
            bezier10Path.cubicTo(95.6f, 23.8f, 86.8f, 24.9f, 79.4f, 24.9f);
            bezier10Path.cubicTo(76.8f, 24.9f, 74.3f, 24.9f, 71.7f, 24.9f);
            bezier10Path.cubicTo(71.3f, 25f, 68.3f, 25.1f, 68.2f, 25.1f);
            bezier10Path.cubicTo(67.7f, 25.4f, 67.9f, 25.8f, 67.5f, 25.8f);
            bezier10Path.cubicTo(66f, 25.8f, 64.4f, 26.5f, 64f, 27.4f);
            bezier10Path.cubicTo(64f, 36.3f, 64f, 45.2f, 64f, 54.1f);
            bezier10Path.cubicTo(63.2f, 54.8f, 63.2f, 55.2f, 63.1f, 56.2f);
            bezier10Path.cubicTo(61.2f, 56.5f, 60f, 57.1f, 57.1f, 57.1f);
            bezier10Path.cubicTo(56.7f, 56.4f, 56f, 56f, 55.7f, 55.2f);
            bezier10Path.cubicTo(54.9f, 53.7f, 55.5f, 47.4f, 55.5f, 45.2f);
            bezier10Path.cubicTo(55.5f, 39.1f, 55.5f, 33f, 55.5f, 26.8f);
            bezier10Path.cubicTo(56.3f, 24.8f, 57.8f, 23.5f, 59.2f, 22.1f);
            bezier10Path.cubicTo(59.6f, 21.8f, 59.9f, 20.4f, 60.8f, 20f);
            bezier10Path.cubicTo(61.2f, 20.1f, 61.6f, 20.2f, 62f, 20.2f);
            bezier10Path.cubicTo(63.6f, 19.7f, 65.7f, 18.6f, 67.6f, 18.1f);
            bezier10Path.cubicTo(69f, 18.1f, 70.4f, 18.8f, 71.2f, 17.9f);
            bezier10Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            bezier10Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color3);
            canvas.drawPath(bezier10Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color3);
            canvas.drawPath(bezier10Path, paint);
            canvas.restore();

            // Bezier 11
            RectF bezier11Rect = new RectF(239.1f, 17.9f, 265.19f, 57.22f);
            Path bezier11Path = new Path();
            bezier11Path.moveTo(254.3f, 17.9f);
            bezier11Path.cubicTo(257.3f, 17.9f, 260.3f, 17.9f, 263.4f, 17.9f);
            bezier11Path.cubicTo(263.8f, 18.4f, 264.2f, 18.5f, 264.6f, 19.1f);
            bezier11Path.cubicTo(265.7f, 20.6f, 265f, 23.2f, 264.6f, 24.2f);
            bezier11Path.cubicTo(264.1f, 24.5f, 264f, 24.7f, 263.4f, 24.9f);
            bezier11Path.cubicTo(262.5f, 24.4f, 260.7f, 24.9f, 259.2f, 24.9f);
            bezier11Path.cubicTo(253.7f, 24.9f, 251f, 24.7f, 248.3f, 27.5f);
            bezier11Path.cubicTo(248.3f, 34.5f, 248.3f, 41.5f, 248.3f, 48.4f);
            bezier11Path.cubicTo(248.3f, 51.7f, 248.4f, 55.4f, 247.1f, 56.5f);
            bezier11Path.cubicTo(246f, 57.4f, 243.5f, 57.2f, 241.5f, 57.2f);
            bezier11Path.cubicTo(240.7f, 56.1f, 239.8f, 55.8f, 239.6f, 53.9f);
            bezier11Path.cubicTo(238.6f, 52.1f, 239.4f, 47.2f, 239.4f, 44.8f);
            bezier11Path.cubicTo(239.4f, 35.1f, 238.4f, 25.6f, 243.8f, 21.3f);
            bezier11Path.cubicTo(243.8f, 21.2f, 243.8f, 21.1f, 243.8f, 21.1f);
            bezier11Path.cubicTo(243.9f, 21.2f, 244f, 21.3f, 244f, 21.3f);
            bezier11Path.cubicTo(244.1f, 21.2f, 244.2f, 21.1f, 244.2f, 21.1f);
            bezier11Path.cubicTo(244.4f, 20.8f, 244.2f, 20.9f, 244.4f, 20.4f);
            bezier11Path.cubicTo(246.9f, 20.4f, 248.6f, 18.8f, 250.9f, 18.3f);
            bezier11Path.cubicTo(252.4f, 18.1f, 253.5f, 18.7f, 254.3f, 17.9f);
            bezier11Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            bezier11Path.setFillType(Path.FillType.EVEN_ODD);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color3);
            canvas.drawPath(bezier11Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color3);
            canvas.drawPath(bezier11Path, paint);
            canvas.restore();

            // Bezier 17
            RectF bezier17Rect = new RectF(261.8f, 17.58f, 319.92f, 57.07f);
            Path bezier17Path = new Path();
            bezier17Path.moveTo(315.4f, 21.2f);
            bezier17Path.cubicTo(315.7f, 21.4f, 316.2f, 22.1f, 315.9f, 22.4f);
            bezier17Path.cubicTo(320.4f, 26f, 319.9f, 30.9f, 319.9f, 38.9f);
            bezier17Path.cubicTo(319.9f, 42.7f, 320.1f, 46.4f, 319f, 49.1f);
            bezier17Path.cubicTo(315f, 58.4f, 299.6f, 57f, 286.2f, 57f);
            bezier17Path.cubicTo(282.5f, 57f, 278.1f, 57.2f, 275.5f, 56.3f);
            bezier17Path.cubicTo(273.9f, 55.7f, 272.2f, 56.7f, 271.1f, 56.3f);
            bezier17Path.cubicTo(267.4f, 54.8f, 263.8f, 51.6f, 262f, 47.9f);
            bezier17Path.cubicTo(261.9f, 46.7f, 261.8f, 45.6f, 261.8f, 44.4f);
            bezier17Path.cubicTo(261.8f, 39.2f, 263.1f, 36.3f, 266f, 34.2f);
            bezier17Path.cubicTo(268.1f, 32.6f, 271f, 31.8f, 273.2f, 30.9f);
            bezier17Path.cubicTo(274.3f, 30.5f, 276f, 31.2f, 276.9f, 30.7f);
            bezier17Path.cubicTo(277.4f, 30.3f, 276.7f, 30.4f, 277.4f, 30.2f);
            bezier17Path.cubicTo(286.3f, 30.6f, 300.5f, 30.7f, 310.9f, 30.7f);
            bezier17Path.cubicTo(311f, 29.8f, 311.1f, 29f, 311.1f, 28.1f);
            bezier17Path.cubicTo(310f, 26.9f, 309.8f, 25.6f, 307.6f, 25.3f);
            bezier17Path.cubicTo(306.1f, 24.4f, 301.1f, 24.8f, 298.5f, 24.8f);
            bezier17Path.lineTo(273.4f, 24.8f);
            bezier17Path.cubicTo(272.5f, 21.9f, 271.9f, 22.1f, 272.7f, 18.5f);
            bezier17Path.cubicTo(273.3f, 18.5f, 273.5f, 18.4f, 273.8f, 17.9f);
            bezier17Path.cubicTo(287.3f, 17.8f, 306.8f, 16.2f, 315.4f, 21.2f);
            bezier17Path.close();
            bezier17Path.moveTo(278.2f, 37f);
            bezier17Path.cubicTo(275.7f, 38.5f, 271.8f, 37.4f, 270.8f, 40.3f);
            bezier17Path.cubicTo(269.6f, 42.2f, 270.3f, 45.3f, 270.8f, 47.5f);
            bezier17Path.cubicTo(272.3f, 48.3f, 273.9f, 49.6f, 275.7f, 50.1f);
            bezier17Path.cubicTo(279.2f, 50.2f, 282.7f, 50.3f, 286.2f, 50.3f);
            bezier17Path.cubicTo(296.1f, 50.3f, 306f, 51.6f, 311.1f, 46.6f);
            bezier17Path.lineTo(311.1f, 37.3f);
            bezier17Path.cubicTo(311f, 37.2f, 310.9f, 37.1f, 310.9f, 37.1f);
            bezier17Path.cubicTo(300f, 37f, 289.1f, 37f, 278.2f, 37f);
            bezier17Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color3);
            canvas.drawPath(bezier17Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color3);
            canvas.drawPath(bezier17Path, paint);
            canvas.restore();

            // Bezier 12
            RectF bezier12Rect = new RectF(539.15f, 15.1f, 599.76f, 59.73f);
            Path bezier12Path = new Path();
            bezier12Path.moveTo(565.2f, 15.6f);
            bezier12Path.lineTo(579.6f, 15.6f);
            bezier12Path.cubicTo(580.4f, 15.2f, 586.4f, 16.6f, 587.5f, 17f);
            bezier12Path.cubicTo(590.7f, 18f, 592.8f, 18.3f, 595.2f, 20f);
            bezier12Path.cubicTo(597.9f, 21.9f, 600.8f, 31.8f, 599.4f, 37.9f);
            bezier12Path.cubicTo(599f, 39.1f, 598.6f, 40.4f, 598.2f, 41.6f);
            bezier12Path.cubicTo(597.3f, 42.2f, 597f, 42.8f, 595.6f, 43f);
            bezier12Path.cubicTo(593.3f, 44.4f, 587f, 43.5f, 583.7f, 43.5f);
            bezier12Path.lineTo(563f, 43.5f);
            bezier12Path.cubicTo(559.5f, 43.5f, 555.4f, 43.2f, 552.3f, 43.7f);
            bezier12Path.cubicTo(552.3f, 44.2f, 552.3f, 44.8f, 552.3f, 45.3f);
            bezier12Path.cubicTo(552.5f, 45.5f, 552.4f, 45.4f, 552.5f, 45.8f);
            bezier12Path.cubicTo(558f, 49.4f, 573.3f, 47.9f, 582.3f, 47.9f);
            bezier12Path.cubicTo(585.4f, 47.9f, 591f, 47.1f, 593.2f, 48.4f);
            bezier12Path.cubicTo(594.4f, 48.8f, 594.7f, 49.7f, 595.5f, 50.5f);
            bezier12Path.cubicTo(595.8f, 53.5f, 596.3f, 57.2f, 593.9f, 58.6f);
            bezier12Path.cubicTo(590.8f, 60.4f, 584f, 59.5f, 579.5f, 59.5f);
            bezier12Path.cubicTo(566.1f, 59.5f, 554.7f, 60.1f, 546f, 56.7f);
            bezier12Path.cubicTo(545.4f, 56.1f, 544.8f, 55.5f, 544.1f, 54.8f);
            bezier12Path.cubicTo(538.3f, 50.5f, 539.2f, 44.8f, 539.2f, 35f);
            bezier12Path.cubicTo(539.2f, 28.8f, 539.2f, 23.6f, 542.5f, 20.8f);
            bezier12Path.cubicTo(545.3f, 18.4f, 549.3f, 16.9f, 553f, 15.9f);
            bezier12Path.cubicTo(555.46f, 15.41f, 556.95f, 16.36f, 558.42f, 15.17f);
            bezier12Path.lineTo(558.5f, 15.1f);
            bezier12Path.cubicTo(560f, 15.9f, 563f, 15.6f, 565.2f, 15.6f);
            bezier12Path.close();
            bezier12Path.moveTo(560.6f, 26.8f);
            bezier12Path.cubicTo(560f, 27.4f, 558.8f, 27.3f, 557.6f, 27.3f);
            bezier12Path.cubicTo(556.8f, 27.8f, 555f, 27.8f, 553.9f, 28f);
            bezier12Path.cubicTo(553f, 29.3f, 552.5f, 29.9f, 552.5f, 32.4f);
            bezier12Path.lineTo(553f, 32.4f);
            bezier12Path.cubicTo(554.9f, 33.4f, 559.9f, 32.6f, 562.3f, 32.6f);
            bezier12Path.lineTo(585.8f, 32.6f);
            bezier12Path.cubicTo(586.1f, 31.7f, 586.1f, 30.1f, 586f, 28.9f);
            bezier12Path.cubicTo(580.4f, 25.6f, 569.1f, 26.8f, 560.6f, 26.8f);
            bezier12Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(bezier12Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color);
            canvas.drawPath(bezier12Path, paint);
            canvas.restore();

            // Bezier 4
            RectF bezier4Rect = new RectF(395f, 15.42f, 454.08f, 59.88f);
            Path bezier4Path = new Path();
            bezier4Path.moveTo(416.2f, 26.8f);
            bezier4Path.cubicTo(415.5f, 27.2f, 414.4f, 26.8f, 413.4f, 27f);
            bezier4Path.cubicTo(411.6f, 27.4f, 409.9f, 28.1f, 408.5f, 28.9f);
            bezier4Path.cubicTo(408.1f, 34.1f, 408.1f, 40.7f, 408.5f, 45.9f);
            bezier4Path.cubicTo(413.3f, 49.2f, 424.3f, 48f, 432.2f, 48f);
            bezier4Path.cubicTo(435.2f, 48f, 439.9f, 47.9f, 440.8f, 45.9f);
            bezier4Path.cubicTo(440.8f, 40.3f, 440.8f, 34.7f, 440.8f, 29.2f);
            bezier4Path.cubicTo(435.6f, 25.7f, 424.7f, 26.8f, 416.2f, 26.8f);
            bezier4Path.close();
            bezier4Path.moveTo(452.6f, 23.8f);
            bezier4Path.cubicTo(454.6f, 27.2f, 454f, 33.4f, 454f, 38.7f);
            bezier4Path.cubicTo(454f, 46f, 453.9f, 51.6f, 449.8f, 54.7f);
            bezier4Path.cubicTo(448.5f, 55.7f, 446.7f, 56.9f, 445.4f, 57.7f);
            bezier4Path.cubicTo(444.7f, 58.1f, 440.1f, 58.1f, 438.4f, 58.6f);
            bezier4Path.cubicTo(434.6f, 59.8f, 423.3f, 60.4f, 417.5f, 59.3f);
            bezier4Path.cubicTo(414.8f, 58.8f, 413.8f, 59.9f, 410.8f, 59.1f);
            bezier4Path.cubicTo(397.4f, 55.3f, 395f, 53.9f, 395f, 36.8f);
            bezier4Path.cubicTo(395.1f, 33.6f, 395.2f, 30.4f, 395.2f, 27.3f);
            bezier4Path.cubicTo(396.7f, 22.3f, 400f, 19.3f, 404.5f, 17.3f);
            bezier4Path.cubicTo(406.49f, 16.41f, 412.52f, 16.6f, 413.78f, 15.42f);
            bezier4Path.cubicTo(429.4f, 16.4f, 446.5f, 13.3f, 452.6f, 23.8f);
            bezier4Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(bezier4Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color);
            canvas.drawPath(bezier4Path, paint);
            canvas.restore();

            // Bezier 5
            RectF bezier5Rect = new RectF(324.46f, 4.9f, 392.2f, 59.49f);
            Path bezier5Path = new Path();
            bezier5Path.moveTo(364.9f, 16f);
            bezier5Path.cubicTo(356.1f, 16.1f, 347.2f, 16.1f, 338.2f, 16.1f);
            bezier5Path.lineTo(338.2f, 29.6f);
            bezier5Path.lineTo(338.7f, 29.6f);
            bezier5Path.cubicTo(340.2f, 30.4f, 346.7f, 29.8f, 348.9f, 29.8f);
            bezier5Path.cubicTo(358.3f, 29.8f, 371.3f, 31.2f, 378.4f, 28.4f);
            bezier5Path.cubicTo(379.3f, 26.1f, 379.3f, 20f, 378.4f, 17.7f);
            bezier5Path.cubicTo(376.4f, 16.6f, 373.3f, 16.4f, 370.7f, 16.5f);
            bezier5Path.cubicTo(370.1f, 16.5f, 366.8f, 16f, 364.9f, 16f);
            bezier5Path.close();
            bezier5Path.moveTo(392f, 14.9f);
            bezier5Path.cubicTo(392.1f, 17.8f, 392.2f, 20.6f, 392.2f, 23.5f);
            bezier5Path.cubicTo(392.1f, 26.1f, 392f, 28.6f, 392f, 31.2f);
            bezier5Path.cubicTo(391.2f, 33.5f, 389.4f, 35.2f, 387.6f, 36.5f);
            bezier5Path.cubicTo(378.9f, 42.9f, 364.3f, 41.2f, 349.5f, 41.2f);
            bezier5Path.cubicTo(345.9f, 41.2f, 341.5f, 40.8f, 338.3f, 41.4f);
            bezier5Path.cubicTo(338.3f, 46f, 338.3f, 50.5f, 338.3f, 55.1f);
            bezier5Path.cubicTo(338f, 55.5f, 337.9f, 56.3f, 337.8f, 57f);
            bezier5Path.cubicTo(333.3f, 60.2f, 332.5f, 59.9f, 326.6f, 58.4f);
            bezier5Path.cubicTo(326.1f, 57.8f, 325.7f, 57.2f, 325.2f, 56.5f);
            bezier5Path.cubicTo(323.9f, 53.4f, 324.7f, 47.6f, 324.7f, 43.7f);
            bezier5Path.cubicTo(324.7f, 35.6f, 324.7f, 27.4f, 324.7f, 19.3f);
            bezier5Path.cubicTo(324.8f, 11.8f, 323.8f, 8.9f, 327.8f, 4.9f);
            bezier5Path.lineTo(363.4f, 4.9f);
            bezier5Path.cubicTo(376.8f, 4.9f, 388.7f, 5.1f, 392f, 14.9f);
            bezier5Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color);
            canvas.drawPath(bezier5Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color);
            canvas.drawPath(bezier5Path, paint);
            canvas.restore();

            // Bezier
            RectF bezierRect = new RectF(115.31f, 6.74f, 171.24f, 57.31f);
            Path bezierPath = new Path();
            bezierPath.moveTo(169.8f, 6.8f);
            bezierPath.cubicTo(170f, 7f, 170.1f, 7.3f, 170.3f, 7.5f);
            bezierPath.cubicTo(171.5f, 9.1f, 171.2f, 14.2f, 171.2f, 17.7f);
            bezierPath.lineTo(171.2f, 39.6f);
            bezierPath.cubicTo(171.2f, 42.8f, 171.5f, 47.5f, 170.5f, 49.1f);
            bezierPath.cubicTo(169.6f, 50.5f, 166.5f, 53f, 166.1f, 54.2f);
            bezierPath.cubicTo(164.9f, 54.5f, 164.1f, 55.5f, 162.8f, 55.8f);
            bezierPath.cubicTo(161.5f, 56.2f, 159.7f, 55.8f, 157.7f, 56.3f);
            bezierPath.cubicTo(152.6f, 57.6f, 133.3f, 57.7f, 129.1f, 56.3f);
            bezierPath.lineTo(126.3f, 56.3f);
            bezierPath.cubicTo(125.3f, 56f, 120.6f, 54.4f, 120.3f, 54.2f);
            bezierPath.cubicTo(118.6f, 52.9f, 116.3f, 49.7f, 115.4f, 47.7f);
            bezierPath.cubicTo(115.4f, 44.1f, 115.4f, 40.4f, 115.4f, 36.8f);
            bezierPath.cubicTo(115.4f, 36.09f, 115.38f, 35.29f, 115.36f, 34.44f);
            bezierPath.cubicTo(115.28f, 30.98f, 115.18f, 26.75f, 116.3f, 24.9f);
            bezierPath.cubicTo(122.7f, 14.9f, 146.2f, 18f, 162.6f, 18.2f);
            bezierPath.cubicTo(163.4f, 15.8f, 162.9f, 11.6f, 162.8f, 8.7f);
            bezierPath.lineTo(163f, 8.7f);
            bezierPath.cubicTo(163.3f, 8f, 163.6f, 7.7f, 164.2f, 7.3f);
            bezierPath.cubicTo(165.3f, 6.5f, 168f, 6.8f, 169.8f, 6.8f);
            bezierPath.close();
            bezierPath.moveTo(129.4f, 25.6f);
            bezierPath.cubicTo(127f, 26.1f, 124.9f, 26.4f, 124.5f, 28.9f);
            bezierPath.cubicTo(123.9f, 29.9f, 124.3f, 32.5f, 124.3f, 34f);
            bezierPath.cubicTo(124.4f, 38.3f, 124.5f, 42.7f, 124.5f, 47f);
            bezierPath.cubicTo(130.6f, 51.3f, 140.4f, 50f, 150.5f, 50f);
            bezierPath.cubicTo(155.4f, 50f, 160.8f, 49.8f, 162.1f, 46.3f);
            bezierPath.cubicTo(162.9f, 45.2f, 162.6f, 42.4f, 162.6f, 40.5f);
            bezierPath.cubicTo(162.6f, 35.5f, 163.3f, 29.4f, 162.4f, 24.9f);
            bezierPath.lineTo(160.3f, 24.9f);
            bezierPath.cubicTo(158.8f, 25.7f, 154.9f, 25.1f, 152.9f, 25.1f);
            bezierPath.cubicTo(145.5f, 25.1f, 136f, 24.1f, 129.4f, 25.6f);
            bezierPath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color3);
            canvas.drawPath(bezierPath, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(color3);
            canvas.drawPath(bezierPath, paint);
            canvas.restore();
        }

        // Text
        RectF textRect = new RectF(632f, 5f, 782f, 60f);
        TextPaint textTextPaint = new TextPaint();
        textTextPaint.setColor(color3);
        //textTextPaint.setColor(Color.WHITE);
        //textTextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
        textTextPaint.setTextSize(60f);
        textTextPaint.setAntiAlias(true);
        StaticLayout textStaticLayout = new StaticLayout(version, textTextPaint, (int) textRect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
        canvas.save();
        canvas.clipRect(textRect);
        canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
        textStaticLayout.draw(canvas);
        canvas.restore();

        canvas.restore();
    }


    // Resizing Behavior

    public static RectF resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target) {
        if (rect.equals(target) || target == null) {
            return rect;
        }

        if (behavior == ResizingBehavior.Stretch) {
            return target;
        }

        PointF ratio = new PointF();
        ratio.x = Math.abs(target.width() / rect.width());
        ratio.y = Math.abs(target.height() / rect.height());

        float scale = 0f;

        switch (behavior) {
            case AspectFit: {
                scale = Math.min(ratio.x, ratio.y);
                break;
            }
            case AspectFill: {
                scale = Math.max(ratio.x, ratio.y);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }

        PointF newSize = new PointF(Math.abs(rect.width() * scale), Math.abs(rect.height() * scale));
        RectF result = new RectF(target.centerX(), target.centerY(), target.centerX(), target.centerY());
        result.inset(-newSize.x / 2f, -newSize.y / 2f);
        return result;
    }


}

//class PaintCodeColor extends Color {
//    private static float[] ColorToHSV(int originalColor) {
//        float hsv[] = new float[3];
//        RGBToHSV(red(originalColor), green(originalColor), blue(originalColor), hsv);
//        return hsv;
//    }
//
//    public static int colorByChangingHue(int originalColor, float newHue) {
//        float hsv[] = ColorToHSV(originalColor);
//        hsv[0] = newHue;
//        return HSVToColor(alpha(originalColor), hsv);
//    }
//
//    public static int colorByChangingSaturation(int originalColor, float newSaturation) {
//        float hsv[] = ColorToHSV(originalColor);
//        hsv[1] = newSaturation;
//        return HSVToColor(alpha(originalColor), hsv);
//    }
//
//    public static int colorByChangingValue(int originalColor, float newValue) {
//        float hsv[] = ColorToHSV(originalColor);
//        hsv[2] = newValue;
//        return HSVToColor(alpha(originalColor), hsv);
//    }
//
//    public static float hue(int color) {
//        return ColorToHSV(color)[0];
//    }
//
//    public static float saturation(int color) {
//        return ColorToHSV(color)[1];
//    }
//
//    public static float brightness(int color) {
//        return ColorToHSV(color)[2];
//    }
//
//    public static int colorByChangingAlpha(int color, int newAlpha) {
//        return argb(newAlpha, red(color), green(color), blue(color));
//    }
//
//    public static int colorByBlendingColors(int c1, float ratio, int c2) {
//        return argb((int) ((1f - ratio) * alpha(c1) + ratio * alpha(c2)),
//                (int) ((1f - ratio) * red(c1) + ratio * red(c2)),
//                (int) ((1f - ratio) * green(c1) + ratio * green(c2)),
//                (int) ((1f - ratio) * blue(c1) + ratio * blue(c2)));
//    }
//
//    public static int colorByApplyingHighlight(int color, float ratio) {
//        return colorByBlendingColors(color, ratio, colorByChangingAlpha(WHITE, alpha(color)));
//    }
//
//    public static int colorByApplyingShadow(int color, float ratio) {
//        return colorByBlendingColors(color, ratio, colorByChangingAlpha(BLACK, alpha(color)));
//    }
//}