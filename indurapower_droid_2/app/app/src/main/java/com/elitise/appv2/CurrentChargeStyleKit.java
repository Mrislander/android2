package com.elitise.appv2;

import android.content.Context;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.LinearGradient;
import android.graphics.RadialGradient;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BlurMaskFilter;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import android.graphics.DashPathEffect;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.graphics.Typeface;
import java.util.Stack;



/**
 * Created by Shannon Green on 1/25/17.
 * Copyright Â© 2017 InduraPower. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author Shannon Green
 */
public class CurrentChargeStyleKit {
    // Context Property Declaration

    public static Context context = null;

    // Resizing Behavior

    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }

    // Canvas Drawings

    // Tab

    public static void drawCurrentChargeAnimation(Canvas canvas, int ledColor, Bitmap alternatorImage, Bitmap engineImage, Bitmap motorcycleEngine, Bitmap battery, float gearRotateAngle, String ampsText, float ledYPos, float ampsValue, float alternatorScale, float engineScale, float motorcycleScale, boolean showLED1, boolean showLED2, boolean showLED3, boolean showLED4, boolean showLED5, boolean showLED6, boolean showLED7) {
        CurrentChargeStyleKit.drawCurrentChargeAnimation(canvas, new RectF(0f, 0f, 283f, 585f), ResizingBehavior.AspectFit, ledColor, alternatorImage, engineImage, motorcycleEngine, battery, gearRotateAngle, ampsText, ledYPos, ampsValue, alternatorScale, engineScale, motorcycleScale, showLED1, showLED2, showLED3, showLED4, showLED5, showLED6, showLED7);
    }

    public static void drawCurrentChargeAnimation(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int ledColor, Bitmap alternatorImage, Bitmap engineImage, Bitmap motorcycleEngine, Bitmap battery, float gearRotateAngle, String ampsText, float ledYPos, float ampsValue, float alternatorScale, float engineScale, float motorcycleScale, boolean showLED1, boolean showLED2, boolean showLED3, boolean showLED4, boolean showLED5, boolean showLED6, boolean showLED7) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint;

        // Local Colors
        int color7 = PaintCodeColor.colorByChangingSaturation(ledColor, 0.6f);
        int color9 = PaintCodeColor.colorByChangingSaturation(ledColor, 0f);
        int color8 = PaintCodeColor.colorByChangingSaturation(ledColor, 0.3f);
        int color = Color.argb(255, 188, 190, 0);
        int color3 = Color.argb(255, 224, 70, 34);

        // Local Gradients
        PaintCodeGradient gradient = new PaintCodeGradient(new int[]{Color.BLACK, PaintCodeColor.colorByBlendingColors(Color.BLACK, 0.5f, Color.GRAY), Color.GRAY, PaintCodeColor.colorByBlendingColors(Color.GRAY, 0.5f, Color.BLACK), Color.BLACK}, new float[]{0f, 0.06f, 0.51f, 0.94f, 1f});
        PaintCodeGradient gradient5 = new PaintCodeGradient(new int[]{Color.WHITE, PaintCodeColor.colorByBlendingColors(Color.WHITE, 0.5f, Color.LTGRAY), Color.LTGRAY, Color.GRAY}, new float[]{0f, 0.19f, 0.42f, 1f});
        PaintCodeGradient ledGradient = new PaintCodeGradient(new int[]{ledColor, Color.WHITE}, new float[]{0f, 1f});

        // Local Shadows
        PaintCodeShadow shadow11 = new PaintCodeShadow(Color.LTGRAY, 0f, 0f, 13f);
        PaintCodeShadow shadow4 = new PaintCodeShadow(color8, 0f, 0f, 2f);
        PaintCodeShadow shadow6 = new PaintCodeShadow(Color.BLACK, 2f, 1f, 5f);
        PaintCodeShadow shadow8 = new PaintCodeShadow(Color.GRAY, 0f, 0f, 14f);
        PaintCodeShadow shadow2 = new PaintCodeShadow(color3, 0f, 0f, 9f);
        PaintCodeShadow shadow3 = new PaintCodeShadow(Color.BLACK, 3f, 3f, 8f);
        PaintCodeShadow shadow9 = new PaintCodeShadow(Color.WHITE, 0f, 0f, 3f);
        PaintCodeShadow shadow5 = new PaintCodeShadow(Color.BLACK, 0f, 0f, 11f);
        PaintCodeShadow ledShadow = new PaintCodeShadow(ledColor, 0f, 0f, 33f);
        PaintCodeShadow shadow7 = new PaintCodeShadow(color9, 0f, 0f, 2f);

        // Local Variables
        float ledScaleExp = Math.abs(Math.min(Math.abs(ampsValue), 20f)) * 25f / 50f * 0.1f + 0.5f;

        // Resize to Target Frame
        canvas.save();
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        RectF resizedFrame = CurrentChargeStyleKit.resizingBehaviorApply(resizing, new RectF(0f, 0f, 283f, 585f), targetFrame);
        canvas.translate(new PointF(resizedFrame.left, resizedFrame.top).x, new PointF(resizedFrame.left, resizedFrame.top).y);
        canvas.scale(resizedFrame.width() / 283f, resizedFrame.height() / 585f);

        // Rectangle 6
        canvas.save();
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        canvas.translate(134.5f, 115.68f);
        currentTransformation.peek().postTranslate(134.5f, 115.68f);
        canvas.scale(2f, 2f);
        currentTransformation.peek().postScale(2f, 2f);
        RectF rectangle6Rect = new RectF(0f, 0f, 6f, 140.34f);
        Path rectangle6Path = new Path();
        rectangle6Path.addRect(rectangle6Rect, Path.Direction.CW);

        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        paint.setStyle(Paint.Style.FILL);
        paint.setShader(gradient.linearGradient(0f, 70.17f, 6f, 70.17f));
        canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        {
            Matrix invertedCurrentTransformation = new Matrix();
            currentTransformation.peek().invert(invertedCurrentTransformation);
            canvas.concat(invertedCurrentTransformation);
            canvas.translate(shadow8.dx, shadow8.dy);
            canvas.concat(currentTransformation.peek());

            Paint shadowPaint = new Paint(paint);
            if (shadow8.radius > 0f) {
                shadowPaint.setMaskFilter(new BlurMaskFilter(shadow8.radius, BlurMaskFilter.Blur.NORMAL));
            }
            canvas.drawPath(rectangle6Path, shadowPaint);
            shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
            canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                canvas.drawColor(shadow8.color);
            }
            currentTransformation.pop();
            canvas.restore();
        }
        currentTransformation.pop();
        canvas.restore();
        canvas.drawPath(rectangle6Path, paint);
        currentTransformation.pop();
        canvas.restore();

        // LED7-circle4
        if (showLED7) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.28f, ledYPos + 210.15f);
            currentTransformation.peek().postTranslate(141.28f, ledYPos + 210.15f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED7circle4Rect = new RectF(-10f, -10f, 10f, 10f);
            Path lED7circle4Path = new Path();
            lED7circle4Path.addOval(lED7circle4Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(ledShadow.dx, ledShadow.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (ledShadow.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(ledShadow.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED7circle4Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(ledShadow.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(ledColor);
            canvas.drawPath(lED7circle4Path, paint);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setColor(shadow6.color);
                canvas.drawPath(lED7circle4Path, paint);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    Matrix invertedCurrentTransformation = new Matrix();
                    currentTransformation.peek().invert(invertedCurrentTransformation);
                    canvas.concat(invertedCurrentTransformation);
                    canvas.translate(shadow6.dx, shadow6.dy);
                    canvas.concat(currentTransformation.peek());


                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(Color.WHITE);
                    if (shadow6.radius > 0f) {
                        paint.setMaskFilter(new BlurMaskFilter(shadow6.radius, BlurMaskFilter.Blur.NORMAL));
                    }
                    canvas.drawPath(lED7circle4Path, paint);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(lED7circle4Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();
        }

        // LED7-glare
        if (showLED7) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.37f, ledYPos + 209.66f);
            currentTransformation.peek().postTranslate(141.37f, ledYPos + 209.66f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED7glareRect = new RectF(-0.23f, -3f, 8f, 8f);
            Path lED7glarePath = new Path();
            lED7glarePath.moveTo(7.23f, -3f);
            lED7glarePath.cubicTo(7.72f, -1.95f, 8f, -0.76f, 8f, 0.51f);
            lED7glarePath.cubicTo(8f, 4.65f, 5.05f, 8f, 1.41f, 8f);
            lED7glarePath.cubicTo(0.84f, 8f, 0.3f, 7.92f, -0.23f, 7.77f);
            lED7glarePath.cubicTo(4.06f, 6.78f, 7.27f, 2.73f, 7.27f, -2.11f);
            lED7glarePath.cubicTo(7.27f, -2.41f, 7.26f, -2.71f, 7.23f, -3f);
            lED7glarePath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            RectF lED7glarePathBounds = new RectF();
            lED7glarePath.computeBounds(lED7glarePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(ledGradient.linearGradient(lED7glarePathBounds.left, lED7glarePathBounds.top, lED7glarePathBounds.left, lED7glarePathBounds.bottom));
            canvas.drawPath(lED7glarePath, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED7-circle3
        if (showLED7) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.42f, ledYPos + 209.91f);
            currentTransformation.peek().postTranslate(141.42f, ledYPos + 209.91f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED7circle3Rect = new RectF(-5.05f, -5f, 4.95f, 5f);
            Path lED7circle3Path = new Path();
            lED7circle3Path.addOval(lED7circle3Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow4.dx, shadow4.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow4.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow4.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED7circle3Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow4.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(lED7circle3Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED7-circle2
        if (showLED7) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.42f, ledYPos + 209.91f);
            currentTransformation.peek().postTranslate(141.42f, ledYPos + 209.91f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED7circle2Rect = new RectF(-3.05f, -3f, 2.95f, 3f);
            Path lED7circle2Path = new Path();
            lED7circle2Path.addOval(lED7circle2Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow7.dx, shadow7.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow7.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow7.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED7circle2Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow7.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color8);
            canvas.drawPath(lED7circle2Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED7-circle1
        if (showLED7) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.42f, ledYPos + 209.91f);
            currentTransformation.peek().postTranslate(141.42f, ledYPos + 209.91f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED7circle1Rect = new RectF(-1.5f, -1.5f, 1.5f, 1.5f);
            Path lED7circle1Path = new Path();
            lED7circle1Path.addOval(lED7circle1Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow9.dx, shadow9.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow9.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow9.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED7circle1Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow9.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color9);
            canvas.drawPath(lED7circle1Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED6-circle4
        if (showLED6) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.14f, ledYPos + 175.39f);
            currentTransformation.peek().postTranslate(141.14f, ledYPos + 175.39f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED6circle4Rect = new RectF(-10f, -10f, 10f, 10f);
            Path lED6circle4Path = new Path();
            lED6circle4Path.addOval(lED6circle4Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(ledShadow.dx, ledShadow.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (ledShadow.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(ledShadow.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED6circle4Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(ledShadow.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(ledColor);
            canvas.drawPath(lED6circle4Path, paint);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setColor(shadow6.color);
                canvas.drawPath(lED6circle4Path, paint);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    Matrix invertedCurrentTransformation = new Matrix();
                    currentTransformation.peek().invert(invertedCurrentTransformation);
                    canvas.concat(invertedCurrentTransformation);
                    canvas.translate(shadow6.dx, shadow6.dy);
                    canvas.concat(currentTransformation.peek());


                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(Color.WHITE);
                    if (shadow6.radius > 0f) {
                        paint.setMaskFilter(new BlurMaskFilter(shadow6.radius, BlurMaskFilter.Blur.NORMAL));
                    }
                    canvas.drawPath(lED6circle4Path, paint);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(lED6circle4Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();
        }

        // LED6-glare
        if (showLED6) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.23f, ledYPos + 174.9f);
            currentTransformation.peek().postTranslate(141.23f, ledYPos + 174.9f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED6glareRect = new RectF(-0.23f, -3f, 8f, 8f);
            Path lED6glarePath = new Path();
            lED6glarePath.moveTo(7.23f, -3f);
            lED6glarePath.cubicTo(7.72f, -1.95f, 8f, -0.76f, 8f, 0.51f);
            lED6glarePath.cubicTo(8f, 4.65f, 5.05f, 8f, 1.41f, 8f);
            lED6glarePath.cubicTo(0.84f, 8f, 0.3f, 7.92f, -0.23f, 7.77f);
            lED6glarePath.cubicTo(4.06f, 6.78f, 7.27f, 2.73f, 7.27f, -2.11f);
            lED6glarePath.cubicTo(7.27f, -2.41f, 7.26f, -2.71f, 7.23f, -3f);
            lED6glarePath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            RectF lED6glarePathBounds = new RectF();
            lED6glarePath.computeBounds(lED6glarePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(ledGradient.linearGradient(lED6glarePathBounds.left, lED6glarePathBounds.top, lED6glarePathBounds.left, lED6glarePathBounds.bottom));
            canvas.drawPath(lED6glarePath, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED6-circle3
        if (showLED6) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.28f, ledYPos + 175.15f);
            currentTransformation.peek().postTranslate(141.28f, ledYPos + 175.15f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED6circle3Rect = new RectF(-5.05f, -5f, 4.95f, 5f);
            Path lED6circle3Path = new Path();
            lED6circle3Path.addOval(lED6circle3Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow4.dx, shadow4.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow4.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow4.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED6circle3Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow4.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(lED6circle3Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED6-circle2
        if (showLED6) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.28f, ledYPos + 175.15f);
            currentTransformation.peek().postTranslate(141.28f, ledYPos + 175.15f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED6circle2Rect = new RectF(-3.05f, -3f, 2.95f, 3f);
            Path lED6circle2Path = new Path();
            lED6circle2Path.addOval(lED6circle2Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow7.dx, shadow7.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow7.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow7.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED6circle2Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow7.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color8);
            canvas.drawPath(lED6circle2Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED6-circle1
        if (showLED6) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.28f, ledYPos + 175.15f);
            currentTransformation.peek().postTranslate(141.28f, ledYPos + 175.15f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED6circle1Rect = new RectF(-1.5f, -1.5f, 1.5f, 1.5f);
            Path lED6circle1Path = new Path();
            lED6circle1Path.addOval(lED6circle1Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow9.dx, shadow9.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow9.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow9.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED6circle1Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow9.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color9);
            canvas.drawPath(lED6circle1Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED5-circle4
        if (showLED5) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.9f, ledYPos + 140.44f);
            currentTransformation.peek().postTranslate(140.9f, ledYPos + 140.44f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED5circle4Rect = new RectF(-10f, -10f, 10f, 10f);
            Path lED5circle4Path = new Path();
            lED5circle4Path.addOval(lED5circle4Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(ledShadow.dx, ledShadow.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (ledShadow.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(ledShadow.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED5circle4Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(ledShadow.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(ledColor);
            canvas.drawPath(lED5circle4Path, paint);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setColor(shadow6.color);
                canvas.drawPath(lED5circle4Path, paint);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    Matrix invertedCurrentTransformation = new Matrix();
                    currentTransformation.peek().invert(invertedCurrentTransformation);
                    canvas.concat(invertedCurrentTransformation);
                    canvas.translate(shadow6.dx, shadow6.dy);
                    canvas.concat(currentTransformation.peek());


                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(Color.WHITE);
                    if (shadow6.radius > 0f) {
                        paint.setMaskFilter(new BlurMaskFilter(shadow6.radius, BlurMaskFilter.Blur.NORMAL));
                    }
                    canvas.drawPath(lED5circle4Path, paint);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(lED5circle4Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();
        }

        // LED5-glare
        if (showLED5) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.99f, ledYPos + 139.94f);
            currentTransformation.peek().postTranslate(140.99f, ledYPos + 139.94f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED5glareRect = new RectF(-0.23f, -3f, 8f, 8f);
            Path lED5glarePath = new Path();
            lED5glarePath.moveTo(7.23f, -3f);
            lED5glarePath.cubicTo(7.72f, -1.95f, 8f, -0.76f, 8f, 0.51f);
            lED5glarePath.cubicTo(8f, 4.65f, 5.05f, 8f, 1.41f, 8f);
            lED5glarePath.cubicTo(0.84f, 8f, 0.3f, 7.92f, -0.23f, 7.77f);
            lED5glarePath.cubicTo(4.06f, 6.78f, 7.27f, 2.73f, 7.27f, -2.11f);
            lED5glarePath.cubicTo(7.27f, -2.41f, 7.26f, -2.71f, 7.23f, -3f);
            lED5glarePath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            RectF lED5glarePathBounds = new RectF();
            lED5glarePath.computeBounds(lED5glarePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(ledGradient.linearGradient(lED5glarePathBounds.left, lED5glarePathBounds.top, lED5glarePathBounds.left, lED5glarePathBounds.bottom));
            canvas.drawPath(lED5glarePath, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED5-circle3
        if (showLED5) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.04f, ledYPos + 140.19f);
            currentTransformation.peek().postTranslate(141.04f, ledYPos + 140.19f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED5circle3Rect = new RectF(-5.05f, -5f, 4.95f, 5f);
            Path lED5circle3Path = new Path();
            lED5circle3Path.addOval(lED5circle3Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow4.dx, shadow4.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow4.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow4.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED5circle3Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow4.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(lED5circle3Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED5-circle2
        if (showLED5) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.04f, ledYPos + 140.19f);
            currentTransformation.peek().postTranslate(141.04f, ledYPos + 140.19f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED5circle2Rect = new RectF(-3.05f, -3f, 2.95f, 3f);
            Path lED5circle2Path = new Path();
            lED5circle2Path.addOval(lED5circle2Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow7.dx, shadow7.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow7.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow7.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED5circle2Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow7.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color8);
            canvas.drawPath(lED5circle2Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED5-circle1
        if (showLED5) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.04f, ledYPos + 140.19f);
            currentTransformation.peek().postTranslate(141.04f, ledYPos + 140.19f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED5circle1Rect = new RectF(-1.5f, -1.5f, 1.5f, 1.5f);
            Path lED5circle1Path = new Path();
            lED5circle1Path.addOval(lED5circle1Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow9.dx, shadow9.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow9.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow9.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED5circle1Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow9.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color9);
            canvas.drawPath(lED5circle1Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED4-circle4
        if (showLED4) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141f, ledYPos + 105.68f);
            currentTransformation.peek().postTranslate(141f, ledYPos + 105.68f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED4circle4Rect = new RectF(-10f, -10f, 10f, 10f);
            Path lED4circle4Path = new Path();
            lED4circle4Path.addOval(lED4circle4Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(ledShadow.dx, ledShadow.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (ledShadow.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(ledShadow.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED4circle4Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(ledShadow.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(ledColor);
            canvas.drawPath(lED4circle4Path, paint);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setColor(shadow6.color);
                canvas.drawPath(lED4circle4Path, paint);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    Matrix invertedCurrentTransformation = new Matrix();
                    currentTransformation.peek().invert(invertedCurrentTransformation);
                    canvas.concat(invertedCurrentTransformation);
                    canvas.translate(shadow6.dx, shadow6.dy);
                    canvas.concat(currentTransformation.peek());


                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(Color.WHITE);
                    if (shadow6.radius > 0f) {
                        paint.setMaskFilter(new BlurMaskFilter(shadow6.radius, BlurMaskFilter.Blur.NORMAL));
                    }
                    canvas.drawPath(lED4circle4Path, paint);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(lED4circle4Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();
        }

        // LED4-glare
        if (showLED4) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.09f, ledYPos + 105.19f);
            currentTransformation.peek().postTranslate(141.09f, ledYPos + 105.19f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED4glareRect = new RectF(-0.23f, -3f, 8f, 8f);
            Path lED4glarePath = new Path();
            lED4glarePath.moveTo(7.23f, -3f);
            lED4glarePath.cubicTo(7.72f, -1.95f, 8f, -0.76f, 8f, 0.51f);
            lED4glarePath.cubicTo(8f, 4.65f, 5.05f, 8f, 1.41f, 8f);
            lED4glarePath.cubicTo(0.84f, 8f, 0.3f, 7.92f, -0.23f, 7.77f);
            lED4glarePath.cubicTo(4.06f, 6.78f, 7.27f, 2.73f, 7.27f, -2.11f);
            lED4glarePath.cubicTo(7.27f, -2.41f, 7.26f, -2.71f, 7.23f, -3f);
            lED4glarePath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            RectF lED4glarePathBounds = new RectF();
            lED4glarePath.computeBounds(lED4glarePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(ledGradient.linearGradient(lED4glarePathBounds.left, lED4glarePathBounds.top, lED4glarePathBounds.left, lED4glarePathBounds.bottom));
            canvas.drawPath(lED4glarePath, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED4-circle3
        if (showLED4) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.14f, ledYPos + 105.44f);
            currentTransformation.peek().postTranslate(141.14f, ledYPos + 105.44f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED4circle3Rect = new RectF(-5.05f, -5f, 4.95f, 5f);
            Path lED4circle3Path = new Path();
            lED4circle3Path.addOval(lED4circle3Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow4.dx, shadow4.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow4.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow4.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED4circle3Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow4.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(lED4circle3Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED4-circle2
        if (showLED4) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.14f, ledYPos + 105.44f);
            currentTransformation.peek().postTranslate(141.14f, ledYPos + 105.44f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED4circle2Rect = new RectF(-3.05f, -3f, 2.95f, 3f);
            Path lED4circle2Path = new Path();
            lED4circle2Path.addOval(lED4circle2Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow7.dx, shadow7.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow7.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow7.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED4circle2Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow7.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color8);
            canvas.drawPath(lED4circle2Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED4-circle1
        if (showLED4) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(141.14f, ledYPos + 105.44f);
            currentTransformation.peek().postTranslate(141.14f, ledYPos + 105.44f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED4circle1Rect = new RectF(-1.5f, -1.5f, 1.5f, 1.5f);
            Path lED4circle1Path = new Path();
            lED4circle1Path.addOval(lED4circle1Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow9.dx, shadow9.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow9.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow9.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED4circle1Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow9.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color9);
            canvas.drawPath(lED4circle1Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED2-circle4
        if (showLED2) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.55f, ledYPos + 36.15f);
            currentTransformation.peek().postTranslate(140.55f, ledYPos + 36.15f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED2circle4Rect = new RectF(-10f, -10f, 10f, 10f);
            Path lED2circle4Path = new Path();
            lED2circle4Path.addOval(lED2circle4Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(ledShadow.dx, ledShadow.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (ledShadow.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(ledShadow.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED2circle4Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(ledShadow.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(ledColor);
            canvas.drawPath(lED2circle4Path, paint);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setColor(shadow6.color);
                canvas.drawPath(lED2circle4Path, paint);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    Matrix invertedCurrentTransformation = new Matrix();
                    currentTransformation.peek().invert(invertedCurrentTransformation);
                    canvas.concat(invertedCurrentTransformation);
                    canvas.translate(shadow6.dx, shadow6.dy);
                    canvas.concat(currentTransformation.peek());


                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(Color.WHITE);
                    if (shadow6.radius > 0f) {
                        paint.setMaskFilter(new BlurMaskFilter(shadow6.radius, BlurMaskFilter.Blur.NORMAL));
                    }
                    canvas.drawPath(lED2circle4Path, paint);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(lED2circle4Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();
        }

        // LED2-glare
        if (showLED2) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.64f, ledYPos + 35.98f);
            currentTransformation.peek().postTranslate(140.64f, ledYPos + 35.98f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED2glareRect = new RectF(-0.23f, -3f, 8f, 8f);
            Path lED2glarePath = new Path();
            lED2glarePath.moveTo(7.23f, -3f);
            lED2glarePath.cubicTo(7.72f, -1.95f, 8f, -0.76f, 8f, 0.51f);
            lED2glarePath.cubicTo(8f, 4.65f, 5.05f, 8f, 1.41f, 8f);
            lED2glarePath.cubicTo(0.84f, 8f, 0.3f, 7.92f, -0.23f, 7.77f);
            lED2glarePath.cubicTo(4.06f, 6.78f, 7.27f, 2.73f, 7.27f, -2.11f);
            lED2glarePath.cubicTo(7.27f, -2.41f, 7.26f, -2.71f, 7.23f, -3f);
            lED2glarePath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            RectF lED2glarePathBounds = new RectF();
            lED2glarePath.computeBounds(lED2glarePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(ledGradient.linearGradient(lED2glarePathBounds.left, lED2glarePathBounds.top, lED2glarePathBounds.left, lED2glarePathBounds.bottom));
            canvas.drawPath(lED2glarePath, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED2-circle3
        if (showLED2) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.69f, ledYPos + 36.23f);
            currentTransformation.peek().postTranslate(140.69f, ledYPos + 36.23f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED2circle3Rect = new RectF(-5.05f, -5f, 4.95f, 5f);
            Path lED2circle3Path = new Path();
            lED2circle3Path.addOval(lED2circle3Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow4.dx, shadow4.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow4.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow4.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED2circle3Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow4.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(lED2circle3Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED2-circle2
        if (showLED2) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.69f, ledYPos + 36.23f);
            currentTransformation.peek().postTranslate(140.69f, ledYPos + 36.23f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED2circle2Rect = new RectF(-3.05f, -3f, 2.95f, 3f);
            Path lED2circle2Path = new Path();
            lED2circle2Path.addOval(lED2circle2Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow7.dx, shadow7.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow7.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow7.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED2circle2Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow7.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color8);
            canvas.drawPath(lED2circle2Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED2-circle1
        if (showLED2) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.69f, ledYPos + 36.23f);
            currentTransformation.peek().postTranslate(140.69f, ledYPos + 36.23f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED2circle1Rect = new RectF(-1.5f, -1.5f, 1.5f, 1.5f);
            Path lED2circle1Path = new Path();
            lED2circle1Path.addOval(lED2circle1Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow9.dx, shadow9.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow9.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow9.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED2circle1Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow9.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color9);
            canvas.drawPath(lED2circle1Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED3-circle4
        if (showLED3) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.5f, ledYPos + 71.04f);
            currentTransformation.peek().postTranslate(140.5f, ledYPos + 71.04f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED3circle4Rect = new RectF(-10f, -10f, 10f, 10f);
            Path lED3circle4Path = new Path();
            lED3circle4Path.addOval(lED3circle4Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(ledShadow.dx, ledShadow.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (ledShadow.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(ledShadow.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED3circle4Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(ledShadow.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(ledColor);
            canvas.drawPath(lED3circle4Path, paint);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setColor(shadow6.color);
                canvas.drawPath(lED3circle4Path, paint);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    Matrix invertedCurrentTransformation = new Matrix();
                    currentTransformation.peek().invert(invertedCurrentTransformation);
                    canvas.concat(invertedCurrentTransformation);
                    canvas.translate(shadow6.dx, shadow6.dy);
                    canvas.concat(currentTransformation.peek());


                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(Color.WHITE);
                    if (shadow6.radius > 0f) {
                        paint.setMaskFilter(new BlurMaskFilter(shadow6.radius, BlurMaskFilter.Blur.NORMAL));
                    }
                    canvas.drawPath(lED3circle4Path, paint);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(lED3circle4Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();
        }

        // LED3-glare
        if (showLED3) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.59f, ledYPos + 70.54f);
            currentTransformation.peek().postTranslate(140.59f, ledYPos + 70.54f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED3glareRect = new RectF(-0.23f, -3f, 8f, 8f);
            Path lED3glarePath = new Path();
            lED3glarePath.moveTo(7.23f, -3f);
            lED3glarePath.cubicTo(7.72f, -1.95f, 8f, -0.76f, 8f, 0.51f);
            lED3glarePath.cubicTo(8f, 4.65f, 5.05f, 8f, 1.41f, 8f);
            lED3glarePath.cubicTo(0.84f, 8f, 0.3f, 7.92f, -0.23f, 7.77f);
            lED3glarePath.cubicTo(4.06f, 6.78f, 7.27f, 2.73f, 7.27f, -2.11f);
            lED3glarePath.cubicTo(7.27f, -2.41f, 7.26f, -2.71f, 7.23f, -3f);
            lED3glarePath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            RectF lED3glarePathBounds = new RectF();
            lED3glarePath.computeBounds(lED3glarePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(ledGradient.linearGradient(lED3glarePathBounds.left, lED3glarePathBounds.top, lED3glarePathBounds.left, lED3glarePathBounds.bottom));
            canvas.drawPath(lED3glarePath, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED3-circle3
        if (showLED3) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.64f, ledYPos + 70.79f);
            currentTransformation.peek().postTranslate(140.64f, ledYPos + 70.79f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED3circle3Rect = new RectF(-5.05f, -5f, 4.95f, 5f);
            Path lED3circle3Path = new Path();
            lED3circle3Path.addOval(lED3circle3Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow4.dx, shadow4.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow4.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow4.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED3circle3Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow4.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(lED3circle3Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED3-circle2
        if (showLED3) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.64f, ledYPos + 70.79f);
            currentTransformation.peek().postTranslate(140.64f, ledYPos + 70.79f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED3circle2Rect = new RectF(-3.05f, -3f, 2.95f, 3f);
            Path lED3circle2Path = new Path();
            lED3circle2Path.addOval(lED3circle2Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow7.dx, shadow7.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow7.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow7.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED3circle2Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow7.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color8);
            canvas.drawPath(lED3circle2Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED3-circle1
        if (showLED3) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.64f, ledYPos + 70.79f);
            currentTransformation.peek().postTranslate(140.64f, ledYPos + 70.79f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED3circle1Rect = new RectF(-1.5f, -1.5f, 1.5f, 1.5f);
            Path lED3circle1Path = new Path();
            lED3circle1Path.addOval(lED3circle1Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow9.dx, shadow9.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow9.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow9.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED3circle1Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow9.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color9);
            canvas.drawPath(lED3circle1Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED1-circle4
        if (showLED1) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.5f, ledYPos + 1.61f);
            currentTransformation.peek().postTranslate(140.5f, ledYPos + 1.61f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED1circle4Rect = new RectF(-10f, -10f, 10f, 10f);
            Path lED1circle4Path = new Path();
            lED1circle4Path.addOval(lED1circle4Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(ledShadow.dx, ledShadow.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (ledShadow.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(ledShadow.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED1circle4Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(ledShadow.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(ledColor);
            canvas.drawPath(lED1circle4Path, paint);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setColor(shadow6.color);
                canvas.drawPath(lED1circle4Path, paint);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    Matrix invertedCurrentTransformation = new Matrix();
                    currentTransformation.peek().invert(invertedCurrentTransformation);
                    canvas.concat(invertedCurrentTransformation);
                    canvas.translate(shadow6.dx, shadow6.dy);
                    canvas.concat(currentTransformation.peek());


                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(Color.WHITE);
                    if (shadow6.radius > 0f) {
                        paint.setMaskFilter(new BlurMaskFilter(shadow6.radius, BlurMaskFilter.Blur.NORMAL));
                    }
                    canvas.drawPath(lED1circle4Path, paint);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(lED1circle4Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();
        }

        // LED1-glare
        if (showLED1) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.5f, ledYPos + 1.61f);
            currentTransformation.peek().postTranslate(140.5f, ledYPos + 1.61f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED1glareRect = new RectF(-0.23f, -3f, 8f, 8f);
            Path lED1glarePath = new Path();
            lED1glarePath.moveTo(7.23f, -3f);
            lED1glarePath.cubicTo(7.72f, -1.95f, 8f, -0.76f, 8f, 0.51f);
            lED1glarePath.cubicTo(8f, 4.65f, 5.05f, 8f, 1.41f, 8f);
            lED1glarePath.cubicTo(0.84f, 8f, 0.3f, 7.92f, -0.23f, 7.77f);
            lED1glarePath.cubicTo(4.06f, 6.78f, 7.27f, 2.73f, 7.27f, -2.11f);
            lED1glarePath.cubicTo(7.27f, -2.41f, 7.26f, -2.71f, 7.23f, -3f);
            lED1glarePath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            RectF lED1glarePathBounds = new RectF();
            lED1glarePath.computeBounds(lED1glarePathBounds, true);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(ledGradient.linearGradient(lED1glarePathBounds.left, lED1glarePathBounds.top, lED1glarePathBounds.left, lED1glarePathBounds.bottom));
            canvas.drawPath(lED1glarePath, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED1-circle3
        if (showLED1) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.55f, ledYPos + 1.86f);
            currentTransformation.peek().postTranslate(140.55f, ledYPos + 1.86f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED1circle3Rect = new RectF(-5.05f, -5f, 4.95f, 5f);
            Path lED1circle3Path = new Path();
            lED1circle3Path.addOval(lED1circle3Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow4.dx, shadow4.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow4.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow4.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED1circle3Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow4.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color7);
            canvas.drawPath(lED1circle3Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED1-circle2
        if (showLED1) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.55f, ledYPos + 1.86f);
            currentTransformation.peek().postTranslate(140.55f, ledYPos + 1.86f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED1circle2Rect = new RectF(-3.05f, -3f, 2.95f, 3f);
            Path lED1circle2Path = new Path();
            lED1circle2Path.addOval(lED1circle2Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow7.dx, shadow7.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow7.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow7.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED1circle2Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow7.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color8);
            canvas.drawPath(lED1circle2Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // LED1-circle1
        if (showLED1) {
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(140.55f, ledYPos + 1.86f);
            currentTransformation.peek().postTranslate(140.55f, ledYPos + 1.86f);
            canvas.scale(ledScaleExp, ledScaleExp);
            currentTransformation.peek().postScale(ledScaleExp, ledScaleExp);
            RectF lED1circle1Rect = new RectF(-1.5f, -1.5f, 1.5f, 1.5f);
            Path lED1circle1Path = new Path();
            lED1circle1Path.addOval(lED1circle1Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow9.dx, shadow9.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow9.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow9.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(lED1circle1Path, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow9.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(color9);
            canvas.drawPath(lED1circle1Path, paint);
            currentTransformation.pop();
            canvas.restore();
        }

        // Group 2
        {
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                canvas.save();
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                canvas.translate(72.22f, 23.6f);
                currentTransformation.peek().postTranslate(72.22f, 23.6f);
                canvas.scale(2f, 2f);
                currentTransformation.peek().postScale(2f, 2f);
                // Gear
                canvas.save();
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                canvas.translate(34.14f, 34.2f);
                currentTransformation.peek().postTranslate(34.14f, 34.2f);
                canvas.rotate(-gearRotateAngle);
                currentTransformation.peek().postRotate(-gearRotateAngle);
                RectF gearRect = new RectF(-34.14f, -34.2f, 33.86f, 33.8f);
                Path gearPath = new Path();
                gearPath.addOval(gearRect, Path.Direction.CW);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(11f);
                paint.setStrokeMiter(10f);
                paint.setPathEffect(new DashPathEffect(new float[]{8f, 6.2f}, 0f));
                canvas.save();
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(Color.DKGRAY);
                canvas.drawPath(gearPath, paint);
                currentTransformation.pop();
                canvas.restore();
                currentTransformation.pop();
                canvas.restore();

                // Oval
                canvas.save();
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                canvas.translate(34.14f, 34.2f);
                currentTransformation.peek().postTranslate(34.14f, 34.2f);
                canvas.rotate(-gearRotateAngle);
                currentTransformation.peek().postRotate(-gearRotateAngle);
                canvas.scale(0.5f, 0.5f);
                currentTransformation.peek().postScale(0.5f, 0.5f);
                RectF ovalRect = new RectF(-78.5f, -79f, 78.5f, 78f);
                Path ovalPath = new Path();
                ovalPath.addArc(ovalRect, 336f, (360f * (float) Math.ceil(347f / 360f)) - 347f);
                ovalPath.lineTo(ovalRect.centerX(), ovalRect.centerY());
                ovalPath.close();

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(color);
                canvas.drawPath(ovalPath, paint);
                currentTransformation.pop();
                canvas.restore();

                // gearInnerCircle
                canvas.save();
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                canvas.translate(34.14f, 34.2f);
                currentTransformation.peek().postTranslate(34.14f, 34.2f);
                RectF gearInnerCircleRect = new RectF(-34f, -34f, 34f, 34f);
                Path gearInnerCirclePath = new Path();
                gearInnerCirclePath.addOval(gearInnerCircleRect, Path.Direction.CW);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                float gearInnerCirclePathResizeRatio = Math.min(gearInnerCircleRect.width() / 68f, gearInnerCircleRect.height() / 68f);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setShader(gradient5.radialGradient(gearInnerCircleRect.centerX(), gearInnerCircleRect.centerY(), 5.69f * gearInnerCirclePathResizeRatio, gearInnerCircleRect.centerX(), gearInnerCircleRect.centerY(), 37.42f * gearInnerCirclePathResizeRatio));
                canvas.drawPath(gearInnerCirclePath, paint);
                canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {

                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(shadow5.color);
                    canvas.drawPath(gearInnerCirclePath, paint);

                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                    canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                    currentTransformation.push(new Matrix(currentTransformation.peek()));
                    {
                        Matrix invertedCurrentTransformation = new Matrix();
                        currentTransformation.peek().invert(invertedCurrentTransformation);
                        canvas.concat(invertedCurrentTransformation);
                        canvas.translate(shadow5.dx, shadow5.dy);
                        canvas.concat(currentTransformation.peek());


                        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                        paint.setColor(Color.WHITE);
                        if (shadow5.radius > 0f) {
                            paint.setMaskFilter(new BlurMaskFilter(shadow5.radius, BlurMaskFilter.Blur.NORMAL));
                        }
                        canvas.drawPath(gearInnerCirclePath, paint);
                    }
                    currentTransformation.pop();
                    canvas.restore();
                }
                currentTransformation.pop();
                canvas.restore();

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(1f);
                paint.setStrokeMiter(10f);
                canvas.save();
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(Color.DKGRAY);
                canvas.drawPath(gearInnerCirclePath, paint);
                currentTransformation.pop();
                canvas.restore();
                currentTransformation.pop();
                canvas.restore();
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
        }

        // Picture 4
        canvas.save();
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        //canvas.translate(25.4f, 344.55f);
        canvas.translate(25.4f, 350f);
        currentTransformation.peek().postTranslate(25.4f,350f);
        canvas.scale(0.2f, 0.2f);
        currentTransformation.peek().postScale(0.2f, 0.2f);
        RectF picture4Rect = new RectF(0f, 0f, 1156f, 1005f);
        Path picture4Path = new Path();
        picture4Path.addRect(picture4Rect, Path.Direction.CW);

        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        // Warning: Fill by raster image is not supported yet. It will be added very soon.
        canvas.drawBitmap(battery,null,picture4Rect,paint);
        currentTransformation.pop();
        canvas.restore();

        // Rectangle
        canvas.save();
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        canvas.translate(86.99f, 542.8f);
        currentTransformation.peek().postTranslate(86.99f, 542.8f);
        canvas.scale(2f, 2f);
        currentTransformation.peek().postScale(2f, 2f);
        RectF rectangleRect = new RectF(0f, 0f, 52.5f, 15.5f);
        Path rectanglePath = new Path();
        rectanglePath.addRect(rectangleRect, Path.Direction.CW);

        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        {
            Matrix invertedCurrentTransformation = new Matrix();
            currentTransformation.peek().invert(invertedCurrentTransformation);
            canvas.concat(invertedCurrentTransformation);
            canvas.translate(shadow11.dx, shadow11.dy);
            canvas.concat(currentTransformation.peek());

            Paint shadowPaint = new Paint(paint);
            if (shadow11.radius > 0f) {
                shadowPaint.setMaskFilter(new BlurMaskFilter(shadow11.radius, BlurMaskFilter.Blur.NORMAL));
            }
            canvas.drawPath(rectanglePath, shadowPaint);
            shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
            canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                canvas.drawColor(shadow11.color);
            }
            currentTransformation.pop();
            canvas.restore();
        }
        currentTransformation.pop();
        canvas.restore();
        paint.setStyle(Paint.Style.FILL);
        paint.setColor(Color.BLACK);
        canvas.drawPath(rectanglePath, paint);

        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        paint.setStrokeWidth(1f);
        paint.setStrokeMiter(10f);
        canvas.save();
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        paint.setStyle(Paint.Style.STROKE);
        paint.setColor(Color.GRAY);
        canvas.drawPath(rectanglePath, paint);
        currentTransformation.pop();
        canvas.restore();
        TextPaint rectangleTextPaint = new TextPaint();
        rectangleTextPaint.setColor(color3);
        //rectangleTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
        rectangleTextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
        rectangleTextPaint.setTextSize(12f);
        StaticLayout rectangleStaticLayout = new StaticLayout(ampsText, rectangleTextPaint, (int) rectangleRect.width(), Layout.Alignment.ALIGN_CENTER, 1f, 0f, false);
        canvas.save();
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        canvas.clipRect(rectangleRect);
        canvas.translate(rectangleRect.left, rectangleRect.top);
        canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        {
            Matrix invertedCurrentTransformation = new Matrix();
            currentTransformation.peek().invert(invertedCurrentTransformation);
            canvas.concat(invertedCurrentTransformation);
            canvas.translate(shadow2.dx, shadow2.dy);
            canvas.concat(currentTransformation.peek());

            TextPaint shadowPaint = new TextPaint(rectangleTextPaint);
            if (shadow2.radius > 0f) {
                shadowPaint.setMaskFilter(new BlurMaskFilter(shadow2.radius, BlurMaskFilter.Blur.NORMAL));
            }
            StaticLayout shadowLayout = new StaticLayout(ampsText, shadowPaint, (int) rectangleRect.width(), Layout.Alignment.ALIGN_CENTER, 1f, 0f, false);
            shadowLayout.draw(canvas);
            shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
            canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                canvas.drawColor(shadow2.color);
            }
            currentTransformation.pop();
            canvas.restore();
        }
        currentTransformation.pop();
        canvas.restore();
        rectangleStaticLayout.draw(canvas);
        currentTransformation.pop();
        canvas.restore();
        currentTransformation.pop();
        canvas.restore();

        // Picture
        canvas.save();
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        canvas.translate(87.5f, 40f);
        currentTransformation.peek().postTranslate(87.5f, 40f);
        canvas.scale(alternatorScale, alternatorScale);
        currentTransformation.peek().postScale(alternatorScale, alternatorScale);
        RectF pictureRect = new RectF(0f, 0f, 300f, 300f);
        Path picturePath = new Path();
        picturePath.addRect(pictureRect, Path.Direction.CW);

        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        // Warning: Fill by raster image is not supported yet. It will be added very soon.
        canvas.drawBitmap(alternatorImage,null,pictureRect,paint);
        currentTransformation.pop();
        canvas.restore();

        // Picture 2
        canvas.save();
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        canvas.translate(143.75f, 97.5f);
        currentTransformation.peek().postTranslate(143.75f, 97.5f);
        canvas.scale(engineScale, engineScale);
        currentTransformation.peek().postScale(engineScale, engineScale);
        RectF picture2Rect = new RectF(-130.5f, -89f, 130.5f, 89f);
        Path picture2Path = new Path();
        picture2Path.addRect(picture2Rect, Path.Direction.CW);

        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        // Warning: Fill by raster image is not supported yet. It will be added very soon.
        canvas.drawBitmap(engineImage,null,picture2Rect,paint);
        currentTransformation.pop();
        canvas.restore();

        // Picture 3
        canvas.save();
        currentTransformation.push(new Matrix(currentTransformation.peek()));
        canvas.translate(140.9f, 93.2f);
        currentTransformation.peek().postTranslate(140.9f, 93.2f);
        canvas.scale(motorcycleScale, motorcycleScale);
        currentTransformation.peek().postScale(motorcycleScale, motorcycleScale);
        RectF picture3Rect = new RectF(-512f, -384f, 512f, 384f);
        Path picture3Path = new Path();
        picture3Path.addRect(picture3Rect, Path.Direction.CW);

        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
        canvas.drawBitmap(motorcycleEngine,null,picture3Rect,paint);
        // Warning: Fill by raster image is not supported yet. It will be added very soon.
        currentTransformation.pop();
        canvas.restore();

        currentTransformation.pop();
        canvas.restore();
    }


    // Resizing Behavior

    public static RectF resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target) {
        if (rect.equals(target) || target == null) {
            return rect;
        }

        if (behavior == ResizingBehavior.Stretch) {
            return target;
        }

        PointF ratio = new PointF();
        ratio.x = Math.abs(target.width() / rect.width());
        ratio.y = Math.abs(target.height() / rect.height());

        float scale = 0f;

        switch (behavior) {
            case AspectFit: {
                scale = Math.min(ratio.x, ratio.y);
                break;
            }
            case AspectFill: {
                scale = Math.max(ratio.x, ratio.y);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }

        PointF newSize = new PointF(Math.abs(rect.width() * scale), Math.abs(rect.height() * scale));
        RectF result = new RectF(target.centerX(), target.centerY(), target.centerX(), target.centerY());
        result.inset(-newSize.x / 2f, -newSize.y / 2f);
        return result;
    }


}

//class PaintCodeColor extends Color {
//    private static float[] ColorToHSV(int originalColor) {
//        float hsv[] = new float[3];
//        RGBToHSV(red(originalColor), green(originalColor), blue(originalColor), hsv);
//        return hsv;
//    }
//
//    public static int colorByChangingHue(int originalColor, float newHue) {
//        float hsv[] = ColorToHSV(originalColor);
//        hsv[0] = newHue;
//        return HSVToColor(alpha(originalColor), hsv);
//    }
//
//    public static int colorByChangingSaturation(int originalColor, float newSaturation) {
//        float hsv[] = ColorToHSV(originalColor);
//        hsv[1] = newSaturation;
//        return HSVToColor(alpha(originalColor), hsv);
//    }
//
//    public static int colorByChangingValue(int originalColor, float newValue) {
//        float hsv[] = ColorToHSV(originalColor);
//        hsv[2] = newValue;
//        return HSVToColor(alpha(originalColor), hsv);
//    }
//
//    public static float hue(int color) {
//        return ColorToHSV(color)[0];
//    }
//
//    public static float saturation(int color) {
//        return ColorToHSV(color)[1];
//    }
//
//    public static float brightness(int color) {
//        return ColorToHSV(color)[2];
//    }
//
//    public static int colorByChangingAlpha(int color, int newAlpha) {
//        return argb(newAlpha, red(color), green(color), blue(color));
//    }
//
//    public static int colorByBlendingColors(int c1, float ratio, int c2) {
//        return argb((int) ((1f - ratio) * alpha(c1) + ratio * alpha(c2)),
//                (int) ((1f - ratio) * red(c1) + ratio * red(c2)),
//                (int) ((1f - ratio) * green(c1) + ratio * green(c2)),
//                (int) ((1f - ratio) * blue(c1) + ratio * blue(c2)));
//    }
//
//    public static int colorByApplyingHighlight(int color, float ratio) {
//        return colorByBlendingColors(color, ratio, colorByChangingAlpha(WHITE, alpha(color)));
//    }
//
//    public static int colorByApplyingShadow(int color, float ratio) {
//        return colorByBlendingColors(color, ratio, colorByChangingAlpha(BLACK, alpha(color)));
//    }
//}
//
//class PaintCodeGradient {
//    public int[] colors;
//    public float[] positions;
//
//    public PaintCodeGradient(int[] colors, float[] positions) {
//        int steps = colors.length;
//        if (positions == null)
//        {
//            positions = new float[steps];
//            for (int i = 0; i < steps; i++)
//                positions[i] = (float)i / (steps-1);
//        }
//
//        this.colors = colors;
//        this.positions = positions;
//    }
//
//    public RadialGradient radialGradient(float startX, float startY, float startRadius, float endX, float endY, float endRadius)
//    {
//        float centerX = startX;
//        float centerY = startY;
//
//        if (startRadius > endRadius) {
//            centerX = endX;
//            centerY = endY;
//        }
//
//        PaintCodeGradient gradient = this.gradientForRadial(startRadius, endRadius);
//        return new RadialGradient(centerX, centerY, Math.max(startRadius, endRadius), gradient.colors, gradient.positions, Shader.TileMode.CLAMP);
//    }
//
//    public LinearGradient linearGradient(float x0, float y0, float x1, float y1)
//    {
//        return new LinearGradient(x0, y0, x1, y1, this.colors, this.positions, Shader.TileMode.CLAMP);
//    }
//
//    private PaintCodeGradient gradientForRadial(float startRadius, float endRadius)
//    {
//        int[] colors;
//        float[] positions;
//
//        float ratio = startRadius / endRadius;
//        int steps = this.colors.length;
//
//        if (startRadius > endRadius)
//        {
//            colors = new int[steps];
//            positions = new float[steps];
//
//            for (int i = 0; i < steps; i++)
//            {
//                colors[i] = this.colors[steps - i - 1];
//                positions[i] = 1 - this.positions[steps - i - 1];
//                ratio = endRadius / startRadius;
//            }
//        }
//        else
//        {
//            colors = this.colors;
//            positions = this.positions.clone();
//        }
//
//        for (int i = 0; i < steps; i++)
//            positions[i] = positions[i] * (1-ratio) + ratio;
//
//        return new PaintCodeGradient(colors, positions);
//    }
//}
//class PaintCodeShadow {
//    public int color;
//    public float dx;
//    public float dy;
//    public float radius;
//
//    public PaintCodeShadow(int color, float dx, float dy, float radius) {
//        this.color = color;
//        this.dx = dx;
//        this.dy = dy;
//        this.radius = radius;
//    }
//}