package com.elitise.appv2;

import android.content.Context;
import android.graphics.Paint;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.LinearGradient;
import android.graphics.RadialGradient;
import android.graphics.BlurMaskFilter;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;
import android.graphics.DashPathEffect;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.graphics.Typeface;
import java.util.Stack;



/**
 * Created by ShannonGreen on 1/30/17.
 * Copyright Â© 2017 InduraPower. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author ShannonGreen
 */
public class ChargerGauge {
    // Context Property Declaration

    public static Context context = null;

    // Resizing Behavior

    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }

    // Canvas Drawings

    // Tab

//    public static void drawChargerGauge(Canvas canvas, int gradColor1, int gradColor2, int colorNeedleSOF, String valueText, float minValue, float maxValue, float valueSOC, String tick0Label, String tick1Label, String tick2Label, String tick3Label, String tick4Label, String tick5Label, String tick6Label, String tick7Label, String tick8Label, String tick9Label, String tick10Label, float valueSOF) {
//        ChargerGauge.drawChargerGauge(canvas, new RectF(0f, 0f, 257f, 182f), ResizingBehavior.AspectFit, gradColor1, gradColor2, colorNeedleSOF, valueText, minValue, maxValue, valueSOC, tick0Label, tick1Label, tick2Label, tick3Label, tick4Label, tick5Label, tick6Label, tick7Label, tick8Label, tick9Label, tick10Label, valueSOF);
//    }

    public static void drawChargerGauge(Canvas canvas, RectF targetFrame, ResizingBehavior resizing, int gradColor1, int gradColor2, int colorNeedleSOF, String valueText, float minValue, float maxValue, float valueSOC, String tick0Label, String tick1Label, String tick2Label, String tick3Label, String tick4Label, String tick5Label, String tick6Label, String tick7Label, String tick8Label, String tick9Label, String tick10Label, float valueSOF,boolean isOneNeedle) {
        // General Declarations
        Stack<Matrix> currentTransformation = new Stack<Matrix>();
        currentTransformation.push(new Matrix());
        Paint paint;

        // Local Colors
        int shadow3Color = Color.argb(255, 255, 194, 180);
        int color2 = Color.argb(255, 224, 70, 34);
        int color = Color.argb(255, 227, 252, 1);

        // Local Gradients
        PaintCodeGradient gradientSOC = new PaintCodeGradient(new int[]{Color.GRAY, PaintCodeColor.colorByBlendingColors(Color.GRAY, 0.5f, Color.WHITE), Color.WHITE}, new float[]{0.24f, 0.33f, 1f});
        PaintCodeGradient dialGradient = new PaintCodeGradient(new int[]{gradColor1, PaintCodeColor.colorByBlendingColors(gradColor1, 0.5f, gradColor2), gradColor2}, new float[]{0f, 0.54f, 1f});

        // Local Shadows
        PaintCodeShadow shadow = new PaintCodeShadow(Color.DKGRAY, -3f, 3f, 7f);
        PaintCodeShadow shadow3 = new PaintCodeShadow(shadow3Color, 0f, 0f, 8f);
        PaintCodeShadow shadow2 = new PaintCodeShadow(Color.BLACK, 1f, -1f, 1f);

        // Local Variables
        float angleOffset = ((maxValue - minValue) / 2f + minValue) * 254f / (float) (maxValue - minValue);
        float needleAngleSOC = -(valueSOC * 254f / (float) (maxValue - minValue)) + angleOffset;
        float needleAngleSOF = -(valueSOF * 254f / (float) (maxValue - minValue)) + angleOffset;

        // Resize to Target Frame
//        canvas.save();
//        currentTransformation.push(new Matrix(currentTransformation.peek()));
//        RectF resizedFrame = ChargerGauge.resizingBehaviorApply(resizing, new RectF(0f, 0f, 257f, 182f), targetFrame);
//        canvas.translate(new PointF(resizedFrame.left, resizedFrame.top).x, new PointF(resizedFrame.left, resizedFrame.top).y);
//        canvas.scale(resizedFrame.width() / 257f, resizedFrame.height() / 182f);

        currentTransformation.push(new Matrix(currentTransformation.peek()));
        RectF resizedFrame = ChargerGauge.resizingBehaviorApply(resizing, new RectF(0f, 0f, 223f, 179f), targetFrame);
        canvas.translate(new PointF(resizedFrame.left, resizedFrame.top).x, new PointF(resizedFrame.left, resizedFrame.top).y);
        canvas.scale(resizedFrame.width() / 223f, resizedFrame.height() / 179f);
        // Group
        {
            // Bezier 2
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(5f, 3.5f);
            currentTransformation.peek().postTranslate(5f, 3.5f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF bezier2Rect = new RectF(0f, 0f, 85f, 72f);
            Path bezier2Path = new Path();
            bezier2Path.moveTo(75.06f, 15.54f);
            bezier2Path.cubicTo(88.32f, 31.71f, 88.32f, 55.29f, 75.06f, 71.46f);
            bezier2Path.cubicTo(75f, 71.79f, 75f, 72f, 75f, 72f);
            bezier2Path.lineTo(10f, 72f);
            bezier2Path.cubicTo(10f, 72f, 10f, 71.79f, 10f, 71.41f);
            bezier2Path.cubicTo(9.2f, 70.55f, 8.49f, 69.62f, 7.83f, 68.66f);
            bezier2Path.cubicTo(-4.87f, 50.37f, -1.91f, 24.86f, 15.18f, 10.18f);
            bezier2Path.cubicTo(20.5f, 5.61f, 26.58f, 2.61f, 32.91f, 1.11f);
            bezier2Path.cubicTo(47.99f, -2.45f, 64.43f, 2.58f, 75.06f, 15.54f);
            bezier2Path.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(Color.WHITE);
            canvas.drawPath(bezier2Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(bezier2Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Bezier
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(109.78f, 88.32f);
            currentTransformation.peek().postTranslate(109.78f, 88.32f);
            canvas.rotate(0.15f);
            currentTransformation.peek().postRotate(0.15f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF bezierRect = new RectF(-40.25f, -34.25f, 41.25f, 34.24f);
            Path bezierPath = new Path();
            bezierPath.moveTo(31.72f, -19.47f);
            bezierPath.cubicTo(44.43f, -4.08f, 44.43f, 18.35f, 31.72f, 33.73f);
            bezierPath.cubicTo(31.66f, 34.05f, 31.66f, 34.24f, 31.66f, 34.24f);
            bezierPath.lineTo(-30.66f, 34.24f);
            bezierPath.cubicTo(-30.66f, 34.24f, -30.66f, 34.05f, -30.66f, 33.69f);
            bezierPath.cubicTo(-31.43f, 32.87f, -32.11f, 31.98f, -32.74f, 31.07f);
            bezierPath.cubicTo(-44.92f, 13.67f, -42.08f, -10.61f, -25.69f, -24.57f);
            bezierPath.cubicTo(-20.6f, -28.91f, -14.76f, -31.77f, -8.69f, -33.19f);
            bezierPath.cubicTo(5.76f, -36.58f, 21.53f, -31.8f, 31.72f, -19.47f);
            bezierPath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(Color.BLACK);
            canvas.drawPath(bezierPath, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(bezierPath, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Oval
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(44.92f, 38.84f);
            currentTransformation.peek().postTranslate(44.92f, 38.84f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF ovalRect = new RectF(0f, 0f, 54f, 55f);
            Path ovalPath = new Path();
            ovalPath.addArc(ovalRect, -217f, 252f);
            ovalPath.lineTo(ovalRect.centerX(), ovalRect.centerY());
            ovalPath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(dialGradient.linearGradient(-0f, 22.02f, 54f, 22.02f));
            canvas.drawPath(ovalPath, paint);
            currentTransformation.pop();
            canvas.restore();

            // Oval 2
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(66.75f, 60.64f);
            currentTransformation.peek().postTranslate(66.75f, 60.64f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF oval2Rect = new RectF(0f, 0f, 36.5f, 36f);
            Path oval2Path = new Path();
            oval2Path.addOval(oval2Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(Color.BLACK);
            canvas.drawPath(oval2Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(0.5f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.BLACK);
            canvas.drawPath(oval2Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Oval 3
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(102.3f, 93.04f);
            currentTransformation.peek().postTranslate(102.3f, 93.04f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF oval3Rect = new RectF(0f, 0f, 8f, 8f);
            Path oval3Path = new Path();
            oval3Path.addOval(oval3Rect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(Color.BLACK);
            canvas.drawPath(oval3Path, paint);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.WHITE);
            canvas.drawPath(oval3Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Oval 4
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(21.22f, 16.46f);
            currentTransformation.peek().postTranslate(21.22f, 16.46f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF oval4Rect = new RectF(0f, 0f, 73f, 72f);
            Path oval4Path = new Path();
            oval4Path.addArc(oval4Rect, -220f, 260f);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(1f);
            paint.setStrokeMiter(10f);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.WHITE);
            canvas.drawPath(oval4Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Oval 5
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(112.28f, 101.28f);
            currentTransformation.peek().postTranslate(112.28f, 101.28f);
            canvas.rotate(0.7f);
            currentTransformation.peek().postRotate(0.7f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF oval5Rect = new RectF(-38f, -37.5f, 38f, 37.5f);
            Path oval5Path = new Path();
            oval5Path.addArc(oval5Rect, -220f, 260f);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeMiter(10f);
            paint.setPathEffect(new DashPathEffect(new float[]{0.5f, 1f}, 0f));
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.RED);
            canvas.drawPath(oval5Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Oval 6
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(112.28f, 102.46f);
            currentTransformation.peek().postTranslate(112.28f, 102.46f);
            canvas.rotate(2.41f);
            currentTransformation.peek().postRotate(2.41f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF oval6Rect = new RectF(-35f, -35f, 35f, 35f);
            Path oval6Path = new Path();
            oval6Path.addArc(oval6Rect, -220f, 260f);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStrokeWidth(2f);
            paint.setStrokeMiter(10f);
            paint.setPathEffect(new DashPathEffect(new float[]{0.5f, 7.25f}, 0f));
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            paint.setStyle(Paint.Style.STROKE);
            paint.setColor(Color.WHITE);
            canvas.drawPath(oval6Path, paint);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Rectangle
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(67.37f, 140.16f);
            currentTransformation.peek().postTranslate(67.37f, 140.16f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF rectangleRect = new RectF(0f, 0f, 36f, 10f);
            Path rectanglePath = new Path();
            rectanglePath.addRect(rectangleRect, Path.Direction.CW);

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setColor(Color.BLACK);
            canvas.drawPath(rectanglePath, paint);
            TextPaint rectangleTextPaint = new TextPaint();
            rectangleTextPaint.setColor(color2);
            //rectangleTextPaint.setTypeface(Typeface.createFromAsset(context.getAssets(), "HelveticaNeue.dfont"));
            rectangleTextPaint.setTypeface(Typeface.create(Typeface.DEFAULT,Typeface.BOLD));
            rectangleTextPaint.setTextSize(9f);
            rectangleTextPaint.setAntiAlias(true);
            rectangleTextPaint.setShadowLayer(2f,-1,1,color2);
            StaticLayout rectangleStaticLayout = new StaticLayout(valueText, rectangleTextPaint, (int) rectangleRect.width(), Layout.Alignment.ALIGN_CENTER, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(rectangleRect);
            canvas.translate(rectangleRect.left, rectangleRect.top + (rectangleRect.height() - rectangleStaticLayout.getHeight()) / 2f);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow3.dx, shadow3.dy);
                canvas.concat(currentTransformation.peek());

                TextPaint shadowPaint = new TextPaint(rectangleTextPaint);
                if (shadow3.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow3.radius, BlurMaskFilter.Blur.NORMAL));
                }
                StaticLayout shadowLayout = new StaticLayout(valueText, shadowPaint, (int) rectangleRect.width(), Layout.Alignment.ALIGN_CENTER, 1f, 0f, false);
                shadowLayout.draw(canvas);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow3.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            rectangleStaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text 2
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(33.08f, 78.39f);
            currentTransformation.peek().postTranslate(33.08f, 78.39f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF text2Rect = new RectF(0f, 0f, 7.82f, 6.18f);
            TextPaint text2TextPaint = new TextPaint();
            text2TextPaint.setColor(color);
            text2TextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            text2TextPaint.setAntiAlias(true);
            text2TextPaint.setTextSize(4f);
            StaticLayout text2StaticLayout = new StaticLayout(tick2Label, text2TextPaint, (int) text2Rect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(text2Rect);
            canvas.translate(text2Rect.left, text2Rect.top + (text2Rect.height() - text2StaticLayout.getHeight()) / 2f);
            text2StaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text 3
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(30.59f, 111.38f);
            currentTransformation.peek().postTranslate(30.59f, 111.38f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF text3Rect = new RectF(0f, 0f, 8.81f, 6.18f);
            TextPaint text3TextPaint = new TextPaint();
            text3TextPaint.setColor(color);
            text3TextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            text3TextPaint.setAntiAlias(true);
            text3TextPaint.setTextSize(4f);
            StaticLayout text3StaticLayout = new StaticLayout(tick1Label, text3TextPaint, (int) text3Rect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(text3Rect);
            canvas.translate(text3Rect.left, text3Rect.top + (text3Rect.height() - text3StaticLayout.getHeight()) / 2f);
            text3StaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(45.55f, 139.66f);
            currentTransformation.peek().postTranslate(45.55f, 139.66f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF textRect = new RectF(0f, 0f, 8.45f, 6.18f);
            TextPaint textTextPaint = new TextPaint();
            textTextPaint.setColor(color);
            textTextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            textTextPaint.setAntiAlias(true);
            textTextPaint.setTextSize(4f);
            StaticLayout textStaticLayout = new StaticLayout(tick0Label, textTextPaint, (int) textRect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(textRect);
            canvas.translate(textRect.left, textRect.top + (textRect.height() - textStaticLayout.getHeight()) / 2f);
            textStaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text 4
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(75.49f, 28.91f);
            currentTransformation.peek().postTranslate(75.49f, 28.91f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF text4Rect = new RectF(0f, 0f, 7.49f, 6.18f);
            TextPaint text4TextPaint = new TextPaint();
            text4TextPaint.setColor(color);
            text4TextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            text4TextPaint.setAntiAlias(true);
            text4TextPaint.setTextSize(4f);
            StaticLayout text4StaticLayout = new StaticLayout(tick4Label, text4TextPaint, (int) text4Rect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(text4Rect);
            canvas.translate(text4Rect.left, text4Rect.top + (text4Rect.height() - text4StaticLayout.getHeight()) / 2f);
            text4StaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text 5
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(48.05f, 50.12f);
            currentTransformation.peek().postTranslate(48.05f, 50.12f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF text5Rect = new RectF(0f, 0f, 8f, 6.18f);
            TextPaint text5TextPaint = new TextPaint();
            text5TextPaint.setColor(color);
            text5TextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            text5TextPaint.setAntiAlias(true);
            text5TextPaint.setTextSize(4f);
            StaticLayout text5StaticLayout = new StaticLayout(tick3Label, text5TextPaint, (int) text5Rect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(text5Rect);
            canvas.translate(text5Rect.left, text5Rect.top + (text5Rect.height() - text5StaticLayout.getHeight()) / 2f);
            text5StaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text 6
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(101.92f, 21.85f);
            currentTransformation.peek().postTranslate(101.92f, 21.85f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF text6Rect = new RectF(0f, 0f, 8.29f, 6.18f);
            TextPaint text6TextPaint = new TextPaint();
            text6TextPaint.setColor(color);
            text6TextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            text6TextPaint.setAntiAlias(true);
            text6TextPaint.setTextSize(4f);
            StaticLayout text6StaticLayout = new StaticLayout(tick5Label, text6TextPaint, (int) text6Rect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(text6Rect);
            canvas.translate(text6Rect.left, text6Rect.top + (text6Rect.height() - text6StaticLayout.getHeight()) / 2f);
            text6StaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text 7
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(137.86f, 28.91f);
            currentTransformation.peek().postTranslate(137.86f, 28.91f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF text7Rect = new RectF(0f, 0f, 7.73f, 6.18f);
            TextPaint text7TextPaint = new TextPaint();
            text7TextPaint.setColor(color);
            text7TextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            text7TextPaint.setAntiAlias(true);
            text7TextPaint.setTextSize(4f);
            StaticLayout text7StaticLayout = new StaticLayout(tick6Label, text7TextPaint, (int) text7Rect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(text7Rect);
            canvas.translate(text7Rect.left, text7Rect.top + (text7Rect.height() - text7StaticLayout.getHeight()) / 2f);
            text7StaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text 8
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(167.8f, 50.12f);
            currentTransformation.peek().postTranslate(167.8f, 50.12f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF text8Rect = new RectF(0f, 0f, 7.62f, 6.18f);
            TextPaint text8TextPaint = new TextPaint();
            text8TextPaint.setColor(color);
            text8TextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            text8TextPaint.setAntiAlias(true);
            text8TextPaint.setTextSize(4f);
            StaticLayout text8StaticLayout = new StaticLayout(tick7Label, text8TextPaint, (int) text8Rect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(text8Rect);
            canvas.translate(text8Rect.left, text8Rect.top + (text8Rect.height() - text8StaticLayout.getHeight()) / 2f);
            text8StaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text 9
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(179.68f, 78.37f);
            currentTransformation.peek().postTranslate(179.68f, 78.37f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF text9Rect = new RectF(0f, 0f, 7.62f, 6.18f);
            TextPaint text9TextPaint = new TextPaint();
            text9TextPaint.setColor(color);
            text9TextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            text9TextPaint.setAntiAlias(true);
            text9TextPaint.setTextSize(4f);
            StaticLayout text9StaticLayout = new StaticLayout(tick8Label, text9TextPaint, (int) text9Rect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(text9Rect);
            canvas.translate(text9Rect.left, text9Rect.top + (text9Rect.height() - text9StaticLayout.getHeight()) / 2f);
            text9StaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text 10
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(179.69f, 111.36f);
            currentTransformation.peek().postTranslate(179.69f, 111.36f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF text10Rect = new RectF(0f, 0f, 7.62f, 6.18f);
            TextPaint text10TextPaint = new TextPaint();
            text10TextPaint.setColor(color);
            text10TextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            text10TextPaint.setAntiAlias(true);
            text10TextPaint.setTextSize(4f);
            StaticLayout text10StaticLayout = new StaticLayout(tick9Label, text10TextPaint, (int) text10Rect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(text10Rect);
            canvas.translate(text10Rect.left, text10Rect.top + (text10Rect.height() - text10StaticLayout.getHeight()) / 2f);
            text10StaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // Text 11
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(162.21f, 139.62f);
            currentTransformation.peek().postTranslate(162.21f, 139.62f);
            canvas.rotate(0.35f);
            currentTransformation.peek().postRotate(0.35f);
            canvas.scale(2.49f, 2.36f);
            currentTransformation.peek().postScale(2.49f, 2.36f);
            RectF text11Rect = new RectF(0f, 0f, 9.86f, 6.18f);
            TextPaint text11TextPaint = new TextPaint();
            text11TextPaint.setColor(color);
            text11TextPaint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
            text11TextPaint.setAntiAlias(true);
            text11TextPaint.setTextSize(4f);
            StaticLayout text11StaticLayout = new StaticLayout(tick10Label, text11TextPaint, (int) text11Rect.width(), Layout.Alignment.ALIGN_NORMAL, 1f, 0f, false);
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.clipRect(text11Rect);
            canvas.translate(text11Rect.left, text11Rect.top + (text11Rect.height() - text11StaticLayout.getHeight()) / 2f);
            text11StaticLayout.draw(canvas);
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();

            // needleSOF
            if(!isOneNeedle) {
                canvas.save();
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                canvas.translate(111.83f, 102.99f);
                currentTransformation.peek().postTranslate(111.83f, 102.99f);
                canvas.rotate(-needleAngleSOF);
                currentTransformation.peek().postRotate(-needleAngleSOF);
                canvas.scale(2.41f, 2.44f);
                currentTransformation.peek().postScale(2.41f, 2.44f);
                RectF needleSOFRect = new RectF(-2.88f, -33.06f, 3.12f, 5.94f);
                Path needleSOFPath = new Path();
                needleSOFPath.moveTo(1.04f, -32.44f);
                needleSOFPath.cubicTo(1.12f, -32.21f, 1.12f, -31.99f, 1.12f, -31.55f);
                needleSOFPath.cubicTo(1.12f, -31.55f, 1.12f, -13.4f, 1.12f, -2.89f);
                needleSOFPath.cubicTo(2.28f, -2.47f, 3.12f, -1.36f, 3.12f, -0.06f);
                needleSOFPath.cubicTo(3.12f, 1.25f, 2.28f, 2.36f, 1.12f, 2.77f);
                needleSOFPath.cubicTo(1.12f, 3.82f, 1.12f, 4.41f, 1.12f, 4.41f);
                needleSOFPath.cubicTo(1.12f, 4.87f, 1.12f, 5.09f, 1.05f, 5.29f);
                needleSOFPath.cubicTo(0.91f, 5.7f, 0.56f, 5.94f, 0.17f, 5.94f);
                needleSOFPath.lineTo(0.07f, 5.94f);
                needleSOFPath.cubicTo(-0.32f, 5.94f, -0.67f, 5.7f, -0.81f, 5.33f);
                needleSOFPath.cubicTo(-0.88f, 5.09f, -0.88f, 4.87f, -0.88f, 4.43f);
                needleSOFPath.cubicTo(-0.88f, 3.86f, -0.88f, 3.31f, -0.88f, 2.77f);
                needleSOFPath.cubicTo(-2.05f, 2.36f, -2.88f, 1.25f, -2.88f, -0.06f);
                needleSOFPath.cubicTo(-2.88f, -0.95f, -2.5f, -1.74f, -1.88f, -2.29f);
                needleSOFPath.cubicTo(-1.59f, -2.55f, -1.25f, -2.75f, -0.88f, -2.89f);
                needleSOFPath.cubicTo(-0.88f, -32.02f, -0.88f, -32.22f, -0.82f, -32.41f);
                needleSOFPath.cubicTo(-0.67f, -32.81f, -0.32f, -33.06f, 0.07f, -33.06f);
                needleSOFPath.lineTo(0.17f, -33.06f);
                needleSOFPath.cubicTo(0.56f, -33.06f, 0.91f, -32.81f, 1.04f, -32.44f);
                needleSOFPath.close();

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    Matrix invertedCurrentTransformation = new Matrix();
                    currentTransformation.peek().invert(invertedCurrentTransformation);
                    canvas.concat(invertedCurrentTransformation);
                    canvas.translate(shadow.dx, shadow.dy);
                    canvas.concat(currentTransformation.peek());

                    Paint shadowPaint = new Paint(paint);
                    if (shadow.radius > 0f) {
                        shadowPaint.setMaskFilter(new BlurMaskFilter(shadow.radius, BlurMaskFilter.Blur.NORMAL));
                    }
                    canvas.drawPath(needleSOFPath, shadowPaint);
                    shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                    canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                    currentTransformation.push(new Matrix(currentTransformation.peek()));
                    {
                        canvas.drawColor(shadow.color);
                    }
                    currentTransformation.pop();
                    canvas.restore();
                }
                currentTransformation.pop();
                canvas.restore();
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(colorNeedleSOF);
                canvas.drawPath(needleSOFPath, paint);
                canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {

                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(shadow2.color);
                    canvas.drawPath(needleSOFPath, paint);

                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                    canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                    currentTransformation.push(new Matrix(currentTransformation.peek()));
                    {
                        Matrix invertedCurrentTransformation = new Matrix();
                        currentTransformation.peek().invert(invertedCurrentTransformation);
                        canvas.concat(invertedCurrentTransformation);
                        canvas.translate(shadow2.dx, shadow2.dy);
                        canvas.concat(currentTransformation.peek());


                        paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                        paint.setColor(Color.WHITE);
                        if (shadow2.radius > 0f) {
                            paint.setMaskFilter(new BlurMaskFilter(shadow2.radius, BlurMaskFilter.Blur.NORMAL));
                        }
                        canvas.drawPath(needleSOFPath, paint);
                    }
                    currentTransformation.pop();
                    canvas.restore();
                }
                currentTransformation.pop();
                canvas.restore();
                currentTransformation.pop();
                canvas.restore();
            }
            // needleSOC
            canvas.save();
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            canvas.translate(111.98f, 102.6f);
            currentTransformation.peek().postTranslate(111.98f, 102.6f);
            canvas.rotate(-needleAngleSOC);
            currentTransformation.peek().postRotate(-needleAngleSOC);
            canvas.scale(2.41f, 2.44f);
            currentTransformation.peek().postScale(2.41f, 2.44f);
            RectF needleSOCRect = new RectF(-2.88f, -33.06f, 3.12f, 5.94f);
            Path needleSOCPath = new Path();
            needleSOCPath.moveTo(1.04f, -32.44f);
            needleSOCPath.cubicTo(1.12f, -32.21f, 1.12f, -31.99f, 1.12f, -31.55f);
            needleSOCPath.cubicTo(1.12f, -31.55f, 1.12f, -13.4f, 1.12f, -2.89f);
            needleSOCPath.cubicTo(2.28f, -2.47f, 3.12f, -1.36f, 3.12f, -0.06f);
            needleSOCPath.cubicTo(3.12f, 1.25f, 2.28f, 2.36f, 1.12f, 2.77f);
            needleSOCPath.cubicTo(1.12f, 3.82f, 1.12f, 4.41f, 1.12f, 4.41f);
            needleSOCPath.cubicTo(1.12f, 4.87f, 1.12f, 5.09f, 1.05f, 5.29f);
            needleSOCPath.cubicTo(0.91f, 5.7f, 0.56f, 5.94f, 0.17f, 5.94f);
            needleSOCPath.lineTo(0.07f, 5.94f);
            needleSOCPath.cubicTo(-0.32f, 5.94f, -0.67f, 5.7f, -0.81f, 5.33f);
            needleSOCPath.cubicTo(-0.88f, 5.09f, -0.88f, 4.87f, -0.88f, 4.43f);
            needleSOCPath.cubicTo(-0.88f, 3.86f, -0.88f, 3.31f, -0.88f, 2.77f);
            needleSOCPath.cubicTo(-2.05f, 2.36f, -2.88f, 1.25f, -2.88f, -0.06f);
            needleSOCPath.cubicTo(-2.88f, -0.95f, -2.5f, -1.74f, -1.88f, -2.29f);
            needleSOCPath.cubicTo(-1.59f, -2.55f, -1.25f, -2.75f, -0.88f, -2.89f);
            needleSOCPath.cubicTo(-0.88f, -32.02f, -0.88f, -32.22f, -0.82f, -32.41f);
            needleSOCPath.cubicTo(-0.67f, -32.81f, -0.32f, -33.06f, 0.07f, -33.06f);
            needleSOCPath.lineTo(0.17f, -33.06f);
            needleSOCPath.cubicTo(0.56f, -33.06f, 0.91f, -32.81f, 1.04f, -32.44f);
            needleSOCPath.close();

            paint = new Paint(Paint.ANTI_ALIAS_FLAG);
            paint.setStyle(Paint.Style.FILL);
            paint.setShader(gradientSOC.linearGradient(0.12f, 5.94f, 0.12f, -33.06f));
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {
                Matrix invertedCurrentTransformation = new Matrix();
                currentTransformation.peek().invert(invertedCurrentTransformation);
                canvas.concat(invertedCurrentTransformation);
                canvas.translate(shadow.dx, shadow.dy);
                canvas.concat(currentTransformation.peek());

                Paint shadowPaint = new Paint(paint);
                if (shadow.radius > 0f) {
                    shadowPaint.setMaskFilter(new BlurMaskFilter(shadow.radius, BlurMaskFilter.Blur.NORMAL));
                }
                canvas.drawPath(needleSOCPath, shadowPaint);
                shadowPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
                canvas.saveLayer(null, shadowPaint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    canvas.drawColor(shadow.color);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            canvas.drawPath(needleSOCPath, paint);
            canvas.saveLayerAlpha(null, 255, Canvas.ALL_SAVE_FLAG);
            currentTransformation.push(new Matrix(currentTransformation.peek()));
            {

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setColor(shadow2.color);
                canvas.drawPath(needleSOCPath, paint);

                paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
                canvas.saveLayer(null, paint, Canvas.ALL_SAVE_FLAG);
                currentTransformation.push(new Matrix(currentTransformation.peek()));
                {
                    Matrix invertedCurrentTransformation = new Matrix();
                    currentTransformation.peek().invert(invertedCurrentTransformation);
                    canvas.concat(invertedCurrentTransformation);
                    canvas.translate(shadow2.dx, shadow2.dy);
                    canvas.concat(currentTransformation.peek());


                    paint = new Paint(Paint.ANTI_ALIAS_FLAG);
                    paint.setColor(Color.WHITE);
                    if (shadow2.radius > 0f) {
                        paint.setMaskFilter(new BlurMaskFilter(shadow2.radius, BlurMaskFilter.Blur.NORMAL));
                    }
                    canvas.drawPath(needleSOCPath, paint);
                }
                currentTransformation.pop();
                canvas.restore();
            }
            currentTransformation.pop();
            canvas.restore();
            currentTransformation.pop();
            canvas.restore();
        }

        currentTransformation.pop();
        canvas.restore();
    }


    // Resizing Behavior

    public static RectF resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target) {
        if (rect.equals(target) || target == null) {
            return rect;
        }

        if (behavior == ResizingBehavior.Stretch) {
            return target;
        }

        PointF ratio = new PointF();
        ratio.x = Math.abs(target.width() / rect.width());
        ratio.y = Math.abs(target.height() / rect.height());

        float scale = 0f;

        switch (behavior) {
            case AspectFit: {
                scale = Math.min(ratio.x, ratio.y);
                break;
            }
            case AspectFill: {
                scale = Math.max(ratio.x, ratio.y);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }

        PointF newSize = new PointF(Math.abs(rect.width() * scale), Math.abs(rect.height() * scale));
        RectF result = new RectF(target.centerX(), target.centerY(), target.centerX(), target.centerY());
        result.inset(-newSize.x / 2f, -newSize.y / 2f);
        return result;
    }


}

//class PaintCodeColor extends Color {
//    private static float[] ColorToHSV(int originalColor) {
//        float hsv[] = new float[3];
//        RGBToHSV(red(originalColor), green(originalColor), blue(originalColor), hsv);
//        return hsv;
//    }
//
//    public static int colorByChangingHue(int originalColor, float newHue) {
//        float hsv[] = ColorToHSV(originalColor);
//        hsv[0] = newHue;
//        return HSVToColor(alpha(originalColor), hsv);
//    }
//
//    public static int colorByChangingSaturation(int originalColor, float newSaturation) {
//        float hsv[] = ColorToHSV(originalColor);
//        hsv[1] = newSaturation;
//        return HSVToColor(alpha(originalColor), hsv);
//    }
//
//    public static int colorByChangingValue(int originalColor, float newValue) {
//        float hsv[] = ColorToHSV(originalColor);
//        hsv[2] = newValue;
//        return HSVToColor(alpha(originalColor), hsv);
//    }
//
//    public static float hue(int color) {
//        return ColorToHSV(color)[0];
//    }
//
//    public static float saturation(int color) {
//        return ColorToHSV(color)[1];
//    }
//
//    public static float brightness(int color) {
//        return ColorToHSV(color)[2];
//    }
//
//    public static int colorByChangingAlpha(int color, int newAlpha) {
//        return argb(newAlpha, red(color), green(color), blue(color));
//    }
//
//    public static int colorByBlendingColors(int c1, float ratio, int c2) {
//        return argb((int) ((1f - ratio) * alpha(c1) + ratio * alpha(c2)),
//                (int) ((1f - ratio) * red(c1) + ratio * red(c2)),
//                (int) ((1f - ratio) * green(c1) + ratio * green(c2)),
//                (int) ((1f - ratio) * blue(c1) + ratio * blue(c2)));
//    }
//
//    public static int colorByApplyingHighlight(int color, float ratio) {
//        return colorByBlendingColors(color, ratio, colorByChangingAlpha(WHITE, alpha(color)));
//    }
//
//    public static int colorByApplyingShadow(int color, float ratio) {
//        return colorByBlendingColors(color, ratio, colorByChangingAlpha(BLACK, alpha(color)));
//    }
//}
//
//class PaintCodeGradient {
//    public int[] colors;
//    public float[] positions;
//
//    public PaintCodeGradient(int[] colors, float[] positions) {
//        int steps = colors.length;
//        if (positions == null)
//        {
//            positions = new float[steps];
//            for (int i = 0; i < steps; i++)
//                positions[i] = (float)i / (steps-1);
//        }
//
//        this.colors = colors;
//        this.positions = positions;
//    }
//
//    public RadialGradient radialGradient(float startX, float startY, float startRadius, float endX, float endY, float endRadius)
//    {
//        float centerX = startX;
//        float centerY = startY;
//
//        if (startRadius > endRadius) {
//            centerX = endX;
//            centerY = endY;
//        }
//
//        PaintCodeGradient gradient = this.gradientForRadial(startRadius, endRadius);
//        return new RadialGradient(centerX, centerY, Math.max(startRadius, endRadius), gradient.colors, gradient.positions, Shader.TileMode.CLAMP);
//    }
//
//    public LinearGradient linearGradient(float x0, float y0, float x1, float y1)
//    {
//        return new LinearGradient(x0, y0, x1, y1, this.colors, this.positions, Shader.TileMode.CLAMP);
//    }
//
//    private PaintCodeGradient gradientForRadial(float startRadius, float endRadius)
//    {
//        int[] colors;
//        float[] positions;
//
//        float ratio = startRadius / endRadius;
//        int steps = this.colors.length;
//
//        if (startRadius > endRadius)
//        {
//            colors = new int[steps];
//            positions = new float[steps];
//
//            for (int i = 0; i < steps; i++)
//            {
//                colors[i] = this.colors[steps - i - 1];
//                positions[i] = 1 - this.positions[steps - i - 1];
//                ratio = endRadius / startRadius;
//            }
//        }
//        else
//        {
//            colors = this.colors;
//            positions = this.positions.clone();
//        }
//
//        for (int i = 0; i < steps; i++)
//            positions[i] = positions[i] * (1-ratio) + ratio;
//
//        return new PaintCodeGradient(colors, positions);
//    }
//}
//class PaintCodeShadow {
//    public int color;
//    public float dx;
//    public float dy;
//    public float radius;
//
//    public PaintCodeShadow(int color, float dx, float dy, float radius) {
//        this.color = color;
//        this.dx = dx;
//        this.dy = dy;
//        this.radius = radius;
//    }
//}